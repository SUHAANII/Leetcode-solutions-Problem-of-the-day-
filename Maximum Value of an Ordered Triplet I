question: You are given a 0-indexed integer array nums.

Return the maximum value over all triplets of indices (i, j, k) such that i < j < k. If all such triplets have a negative value, return 0.

The value of a triplet of indices (i, j, k) is equal to (nums[i] - nums[j]) * nums[k].

code:

class Solution {
public:
    long long maximumTripletValue(vector<int>& nums) {
        // Initialize variable to store the maximum triplet value
        long maxi = 0;

        // Iterate through the array for the index i
        for (int i = 0; i < nums.size(); i++) {
            // Iterate backwards for index k, starting from the end of the array
            for (int k = nums.size() - 1; k > i; k--) {
                // Set j to be the next index after i
                int j = i + 1;

                // Iterate while j is less than k
                while (j < k) {
                    // Calculate the triplet value and update maxi if it's greater
                    maxi = max(maxi, (long(nums[i] - nums[j]) * nums[k]));
                    j++;  // Move to the next index
                }
            }
        }

        // Return the maximum value found, ensuring it's not negative
        return maxi < 0 ? 0 : maxi;
    }
};
