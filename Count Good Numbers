question: A digit string is good if the digits (0-indexed) at even indices are even and the digits at odd indices are prime (2, 3, 5, or 7).

For example, "2582" is good because the digits (2 and 8) at even positions are even and the digits (5 and 2) at odd positions are prime. However, "3245" is not good because 3 is at an even index but is not even.
Given an integer n, return the total number of good digit strings of length n. Since the answer may be large, return it modulo 109 + 7.

A digit string is a string consisting of digits 0 through 9 that may contain leading zeros.

code:

class Solution {
public:
    // Define a constant for the modulo value
    const int MOD = 1e9 + 7;

    // Function to count the number of good numbers of a given length
    int countGoodNumbers(long long chakraLength) {
        // Calculate the number of even and odd positions
        long long even = (chakraLength + 1) / 2; // Even positions: 0, 2, 4, ...
        long long odd = chakraLength / 2;        // Odd positions: 1, 3, 5, ...

        // Calculate the number of ways to fill even positions (5 options: {0, 2, 4, 6, 8})
        long long evenWays = chakraPower(5, even);
        // Calculate the number of ways to fill odd positions (4 options: {1, 3, 5, 7, 9})
        long long oddWays = chakraPower(4, odd);

        // Return the total combinations of good numbers, taking modulo
        return (evenWays * oddWays) % MOD;
    }

    // Helper function to calculate (base^power) % MOD using exponentiation by squaring
    long long chakraPower(long long base, long long power) {
        long long result = 1; // Initialize result
        base %= MOD;          // Reduce base modulo MOD

        // Loop until power becomes zero
        while (power > 0) {
            // If power is odd, multiply result by base and take modulo
            if (power % 2 == 1)
                result = (result * base) % MOD;

            // Square the base and reduce modulo
            base = (base * base) % MOD;
            // Divide power by 2 for the next iteration
            power /= 2;
        }

        // Return the final result
        return result;
    }
};
