question: You are given an integer array nums.

You are allowed to delete any number of elements from nums without making it empty. After performing the deletions, select a subarray of nums such that:

All elements in the subarray are unique.
The sum of the elements in the subarray is maximized.
Return the maximum sum of such a subarray.

code:
class Solution {
public:
    int maxSum(vector<int>& nums) {
        // Flag to check if all elements are negative
        bool allNegative = true;

        // Initialize maxVal to the smallest possible integer
        int maxVal = INT_MIN;

        // Iterate through the nums array to determine the maximum value
        // and whether there are any non-negative numbers.
        for (int n : nums) {
            // If we find a non-negative number, set allNegative to false
            if (n >= 0) allNegative = false;

            // Update maxVal if the current number is greater than the current maxVal
            if (n > maxVal) maxVal = n;
        }

        // If all numbers are negative, return the maximum value found
        if (allNegative) return maxVal;

        // Use an unordered_set to store unique positive numbers
        unordered_set<int> unique(nums.begin(), nums.end());

        // Initialize sum to accumulate the sum of positive unique numbers
        int sum = 0;

        // Iterate through the unique set and sum up positive values
        for (int val : unique) {
            if (val > 0) sum += val; // Only add positive values to the sum
        }

        // Return the total sum of unique positive numbers
        return sum;
    }
};
