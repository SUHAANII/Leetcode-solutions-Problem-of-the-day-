question: Due to a bug, there are many duplicate folders in a file system. You are given a 2D array paths, where paths[i] is an array representing an absolute path to the ith folder in the file system.

For example, ["one", "two", "three"] represents the path "/one/two/three".
Two folders (not necessarily on the same level) are identical if they contain the same non-empty set of identical subfolders and underlying subfolder structure. The folders do not need to be at the root level to be identical. If two or more folders are identical, then mark the folders as well as all their subfolders.

For example, folders "/a" and "/b" in the file structure below are identical. They (as well as their subfolders) should all be marked:
/a
/a/x
/a/x/y
/a/z
/b
/b/x
/b/x/y
/b/z
However, if the file structure also included the path "/b/w", then the folders "/a" and "/b" would not be identical. Note that "/a/x" and "/b/x" would still be considered identical even with the added folder.
Once all the identical folders and their subfolders have been marked, the file system will delete all of them. The file system only runs the deletion once, so any folders that become identical after the initial deletion are not deleted.

Return the 2D array ans containing the paths of the remaining folders after deleting all the marked folders. The paths may be returned in any order.

code:

#include <vector>
#include <string>
#include <unordered_map>
#include <algorithm>

using namespace std;

// Define a structure to represent each folder in the tree
struct Node {
    string name;  // Name of the folder
    unordered_map<string, Node*> children;  // Map of child folders
    string signature;  // Unique signature representing the structure of the folder

    // Constructor to initialize a Node with its name
    Node(string name) : name(name) {}
};

class Solution {
public:
    // Main function to delete duplicate folders
    vector<vector<string>> deleteDuplicateFolder(vector<vector<string>>& paths) {
        // Create the root of the folder tree
        Node* root = new Node("");

        // Build the folder tree from the given paths
        for (const auto& path : paths) {
            Node* curr = root;  // Start from the root
            for (const string& folder : path) {
                // If the folder does not exist, create it
                if (curr->children.find(folder) == curr->children.end()) {
                    curr->children[folder] = new Node(folder);
                }
                curr = curr->children[folder];  // Move to the child node
            }
        }

        // Map to count the occurrences of each folder structure signature
        unordered_map<string, int> signatureCount;
        dfs(root, signatureCount);  // Generate signatures for the folder structures

        vector<vector<string>> result;  // To store the final result
        vector<string> currentPath;  // To keep track of the current path while traversing
        // Traverse the tree and collect paths that are not duplicates
        for (const auto& [name, child] : root->children) {
            dfs2(child, currentPath, result, signatureCount);
        }

        // Clean up the dynamically allocated memory
        delete root;
        return result;  // Return the paths of non-duplicate folders
    }

private:
    // Helper function to generate signatures and count them
    void dfs(Node* node, unordered_map<string, int>& signatureCount) {
        // If the node has no children, it is a leaf node
        if (node->children.empty()) {
            node->signature = "";  // Leaf nodes have an empty signature
            return;
        }

        vector<string> childSignatures;  // To store the signatures of child nodes
        for (const auto& [name, child] : node->children) {
            dfs(child, signatureCount);  // Recursively generate signatures for children
            // Create a signature for the current child
            childSignatures.push_back(name + "(" + child->signature + ")");
        }
        // Sort the signatures to ensure a consistent order
        sort(childSignatures.begin(), childSignatures.end());
        node->signature = "";  // Reset the signature for the current node
        // Combine child signatures to form the current node's signature
        for (const string& sig : childSignatures) {
            node->signature += sig;
        }
        // Increment the count for this signature
        signatureCount[node->signature]++;
    }

    // Helper function to collect paths that are not duplicates
    void dfs2(Node* node, vector<string>& currentPath, vector<vector<string>>& result, unordered_map<string, int>& signatureCount) {
        // Skip this path if its signature appears more than once (duplicate)
        if (!node->children.empty() && signatureCount[node->signature] >= 2) {
            return;
        }
        currentPath.push_back(node->name);  // Add the current folder to the path
        result.push_back(currentPath);  // Store the current path in the result
        // Recursively process each child folder
        for (const auto& [name, child] : node->children) {
            dfs2(child, currentPath, result, signatureCount);
        }
        currentPath.pop_back();  // Backtrack to explore other paths
    }
};
