question: You are given an m x n integer matrix grid and an array queries of size k.

Find an array answer of size k such that for each integer queries[i] you start in the top left cell of the matrix and repeat the following process:

If queries[i] is strictly greater than the value of the current cell that you are in, then you get one point if it is your first time visiting this cell, and you can move to any adjacent cell in all 4 directions: up, down, left, and right.
Otherwise, you do not get any points, and you end this process.
After the process, answer[i] is the maximum number of points you can get. Note that for each query you are allowed to visit the same cell multiple times.

Return the resulting array answer.

code:

class Solution {
public:
    // Function to find the maximum points that can be collected from the grid based on the queries
    vector<int> maxPoints(vector<vector<int>>& grid, vector<int>& queries) {
        // Get the number of rows and columns in the grid
        int rows = grid.size(), cols = grid[0].size();
        
        // Create a vector of pairs to hold queries and their original indices
        vector<pair<int, int>> sortedQueries;
        for (int i = 0; i < queries.size(); i++) {
            sortedQueries.emplace_back(queries[i], i); // Store each query with its index
        }
        
        // Sort the queries based on their values
        sort(sortedQueries.begin(), sortedQueries.end());

        // Prepare the result vector to store the points for each query
        vector<int> result(queries.size(), 0);
        
        // Min-heap to store grid values and their positions
        priority_queue<pair<int, pair<int, int>>, vector<pair<int, pair<int, int>>>, greater<>> minHeap;
        
        // 2D vector to track visited cells in the grid
        vector<vector<bool>> visited(rows, vector<bool>(cols, false));

        // Start from the top-left corner of the grid
        minHeap.emplace(grid[0][0], make_pair(0, 0));
        visited[0][0] = true; // Mark the starting cell as visited
        int points = 0; // Initialize points counter
        
        // Directions for moving in the grid (right, down, left, up)
        vector<pair<int, int>> directions = {{0, 1}, {1, 0}, {0, -1}, {-1, 0}};

        // Process each query in sorted order
        for (auto& [queryVal, queryIdx] : sortedQueries) {
            // While the min-heap is not empty and the smallest value is less than the current query value
            while (!minHeap.empty() && minHeap.top().first < queryVal) {
                auto [val, pos] = minHeap.top(); // Get the smallest value and its position
                minHeap.pop(); // Remove it from the heap
                int row = pos.first, col = pos.second; // Extract row and column

                points++; // Increment points for the collected grid value

                // Explore the neighboring cells
                for (auto& [dr, dc] : directions) {
                    int nr = row + dr, nc = col + dc; // Calculate new row and column
                    // Check if the new position is within bounds and not visited
                    if (nr >= 0 && nr < rows && nc >= 0 && nc < cols && !visited[nr][nc]) {
                        // Add the new cell to the min-heap
                        minHeap.emplace(grid[nr][nc], make_pair(nr, nc));
                        visited[nr][nc] = true; // Mark the new cell as visited
                    }
                }
            }
            // Store the points collected for the current query
            result[queryIdx] = points;
        }

        // Return the results for all queries
        return result;
    }
};
