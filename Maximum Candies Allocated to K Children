question: You are given a 0-indexed integer array candies. Each element in the array denotes a pile of candies of size candies[i]. You can divide each pile into any number of sub piles, but you cannot merge two piles together.

You are also given an integer k. You should allocate piles of candies to k children such that each child gets the same number of candies. Each child can be allocated candies from only one pile of candies and some piles of candies may go unused.

Return the maximum number of candies each child can get.

code:

class Solution {
public:
    // Function to find the maximum number of candies that can be distributed to 'k' children
    int maximumCandies(vector<int>& candies, long long k) {
        // Initialize the left boundary to 1 (minimum candies per child) 
        // and right boundary to the maximum number of candies in any pile
        long long left = 1, right = *max_element(candies.begin(), candies.end());
        int result = 0; // Variable to store the maximum candies per child

        // Binary search to find the maximum number of candies that can be given to each child
        while (left <= right) {
            // Calculate the mid-point (candies per child)
            long long mid = left + (right - left) / 2;
            long long children_count = 0; // Count of children that can be satisfied with 'mid' candies

            // Calculate how many children can be satisfied with 'mid' candies from each pile
            for (int pile : candies) {
                children_count += pile / mid; // Integer division to find how many children can get 'mid' candies from this pile
            }

            // Check if the number of children that can be satisfied is at least 'k'
            if (children_count >= k) {
                result = mid; // Update result to current mid (possible solution)
                left = mid + 1; // Try to find a larger number of candies per child
            } else {
                right = mid - 1; // Try to find a smaller number of candies per child
            }
        }

        // Return the maximum number of candies that can be given to each child
        return result;
    }
};
