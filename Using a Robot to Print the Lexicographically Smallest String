question: You are given a string s and a robot that currently holds an empty string t. Apply one of the following operations until s and t are both empty:

Remove the first character of a string s and give it to the robot. The robot will append this character to the string t.
Remove the last character of a string t and give it to the robot. The robot will write this character on paper.
Return the lexicographically smallest string that can be written on the paper.

 

code:

class Solution {
public:
    // Helper function to find the lexicographically smallest remaining character
    char l(vector<int>& freq) {
        // Traverse the frequency array to find the smallest character
        for (int i = 0; i < 26; i++) {
            if (freq[i]) return 'a' + i; // Return the character if its frequency is non-zero
        }
        return 'a'; // Default return (should not reach here if input is valid)
    }

    string robotWithString(string s) {
        stack<char> st; // Stack to hold characters
        string t = ""; // Result string to build the final output
        vector<int> freq(26); // Frequency array to count occurrences of each character

        // Step 1: Count frequency of each character in the input string s
        for (char ch : s) {
            freq[ch - 'a']++; // Increment the frequency of the character
        }

        // Step 2: Iterate over characters in the string s
        for (char ch : s) {
            st.push(ch); // Push the current character onto the stack
            freq[ch - 'a']--; // Decrease the frequency of the current character

            // Step 3: Pop from stack to result if the top of the stack is less than or equal
            // to the smallest remaining character
            while (!st.empty() && st.top() <= l(freq)) {
                t += st.top(); // Append the top character of the stack to the result
                st.pop(); // Remove the character from the stack
            }
        }

        // Step 4: Pop any remaining characters from the stack to the result
        while (!st.empty()) {
            t += st.top(); // Append the remaining characters to the result
            st.pop(); // Remove the character from the stack
        }

        return t; // Return the final result string
    }
};
