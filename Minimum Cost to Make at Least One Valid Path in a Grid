Question: Given an m x n grid. Each cell of the grid has a sign pointing to the next cell you should visit if you are currently in this cell. The sign of grid[i][j] can be:

1 which means go to the cell to the right. (i.e go from grid[i][j] to grid[i][j + 1])
2 which means go to the cell to the left. (i.e go from grid[i][j] to grid[i][j - 1])
3 which means go to the lower cell. (i.e go from grid[i][j] to grid[i + 1][j])
4 which means go to the upper cell. (i.e go from grid[i][j] to grid[i - 1][j])
Notice that there could be some signs on the cells of the grid that point outside the grid.

You will initially start at the upper left cell (0, 0). A valid path in the grid is a path that starts from the upper left cell (0, 0) and ends at the bottom-right cell (m - 1, n - 1) following the signs on the grid. The valid path does not have to be the shortest.

You can modify the sign on a cell with cost = 1. You can modify the sign on a cell one time only.

Return the minimum cost to make the grid have at least one valid path.

code:

class Solution {
public:
    #define p pair<int, int> // Define a pair type for easier readability

    // Function to check if the cell (r, c) is valid for movement
    bool isValid(int r, int c, int n, int m, vector<vector<int>>& vis) {
        return r >= 0 && c >= 0 && r < n && c < m && vis[r][c] == 0; // Check bounds and if not visited
    }

    // Function to find the minimum cost to reach the bottom-right corner of the grid
    int minCost(vector<vector<int>>& grid) {
        int n = grid.size(); // Number of rows in the grid
        int m = grid[0].size(); // Number of columns in the grid
        
        // Priority queue to store pairs of (cost, (row, column))
        priority_queue<pair<int, p>, vector<pair<int, p>>, greater<pair<int, p>>> pq;
        
        // Visited array to keep track of visited cells
        vector<vector<int>> vis(n, vector<int>(m, 0));
        
        // Directions for moving right, left, down, and up
        vector<vector<int>> directions = {{0, 1}, {0, -1}, {1, 0}, {-1, 0}};
        
        // Start from the top-left corner with cost 0
        pq.push({0, {0, 0}});

        // While there are cells to process in the priority queue
        while (!pq.empty()) {
            auto it = pq.top(); // Get the cell with the minimum cost
            pq.pop();
            int d = it.first; // Current cost to reach this cell
            int r = it.second.first; // Current row
            int c = it.second.second; // Current column
            
            // If this cell has already been visited, skip it
            if (vis[r][c]) continue;
            
            // Mark this cell as visited
            vis[r][c] = 1;
            
            // If we've reached the bottom-right corner, return the cost
            if (r == n - 1 && c == m - 1) {
                return d;
            }
            
            // Determine the direction we should move based on the grid value
            int dir = grid[r][c] - 1; // Grid values are 1-indexed, so subtract 1
            int nr = r + directions[dir][0]; // New row based on the direction
            int nc = c + directions[dir][1]; // New column based on the direction
            
            // If the new cell is valid, add it to the priority queue with the same cost
            if (isValid(nr, nc, n, m, vis)) {
                pq.push({d, {nr, nc}});
            }
            
            // Explore all other possible directions (cost + 1)
            for (int i = 0; i < 4; i++) {
                if (i == dir) continue; // Skip the current direction
                
                // Calculate new cell coordinates
                nr = r + directions[i][0];
                nc = c + directions[i][1];
                
                // If the new cell is valid, add it to the priority queue with an increased cost
                if (isValid(nr, nc, n, m, vis)) {
                    pq.push({d + 1, {nr, nc}});
                }
            }
        }
        return -1; // If the bottom-right corner is unreachable, return -1
    }
};
