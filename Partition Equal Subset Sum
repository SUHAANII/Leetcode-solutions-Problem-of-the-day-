question: Given an integer array nums, return true if you can partition the array into two subsets such that the sum of the elements in both subsets is equal or false otherwise.

code:

class Solution {
public:
    // Function to determine if the array can be partitioned into two subsets with equal sum
    bool canPartition(vector<int>& nums) {
        int sum = 0; // Variable to store the total sum of the array
        int n = nums.size(); // Size of the input array
        
        // Calculate the total sum of the elements in nums
        for (int i = 0; i < n; i++) {
            sum += nums[i];
        }
        
        // If the total sum is odd, it's impossible to split it into two equal subsets
        if (sum % 2 != 0)
            return false;

        // Create a bitset to keep track of achievable sums
        // Initialize the bitset with the first bit set (representing sum 0 is achievable)
        bitset<10001> bit(1);
        
        // Iterate through each number in the array
        for (auto i : nums) {
            // Update the bitset to include new achievable sums by shifting
            // This effectively checks all sums that can be formed by adding the current number
            bit |= bit << i;
            
            // If we can achieve half of the total sum, return true
            if (bit[sum / 2])
                return true;
        }
        
        // Finally, check if we can achieve the target sum (sum / 2)
        return bit[sum / 2];
    }
};
