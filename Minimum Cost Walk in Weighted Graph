question: There is an undirected weighted graph with n vertices labeled from 0 to n - 1.

You are given the integer n and an array edges, where edges[i] = [ui, vi, wi] indicates that there is an edge between vertices ui and vi with a weight of wi.

A walk on a graph is a sequence of vertices and edges. The walk starts and ends with a vertex, and each edge connects the vertex that comes before it and the vertex that comes after it. It's important to note that a walk may visit the same edge or vertex more than once.

The cost of a walk starting at node u and ending at node v is defined as the bitwise AND of the weights of the edges traversed during the walk. In other words, if the sequence of edge weights encountered during the walk is w0, w1, w2, ..., wk, then the cost is calculated as w0 & w1 & w2 & ... & wk, where & denotes the bitwise AND operator.

You are also given a 2D array query, where query[i] = [si, ti]. For each query, you need to find the minimum cost of the walk starting at vertex si and ending at vertex ti. If there exists no such walk, the answer is -1.

Return the array answer, where answer[i] denotes the minimum cost of a walk for query i.

code:

class Solution {
public:
    vector<int> minimumCost(int n, vector<vector<int>>& edges, vector<vector<int>>& query) {
        // Initialize the parent vector for Union-Find structure
        vector<int> parent(n);
        // Initialize min_path_cost to store the minimum path costs, defaulting to -1
        vector<int> min_path_cost(n, -1);
        
        // Fill the parent vector with initial values (0 to n-1)
        iota(parent.begin(), parent.end(), 0);

        // Function to find the root of a node with path compression
        function<int(int)> find_root = [&](int node) {
            // If the node is not its own parent, recursively find the root
            if (parent[node] != node) {
                parent[node] = find_root(parent[node]); // Path compression
            }
            return parent[node]; // Return the root
        };

        // Process each edge to build the Union-Find structure
        for (auto& edge : edges) {
            int source = edge[0], target = edge[1], weight = edge[2];
            // Find the roots of the source and target nodes
            int source_root = find_root(source);
            int target_root = find_root(target);

            // Update the minimum path cost for the target root
            // This assumes a bitwise AND operation; it may need adjustment based on requirements
            min_path_cost[target_root] &= weight;

            // If the source and target are in different components, union them
            if (source_root != target_root) {
                // Update the minimum path cost for the target root based on the source root
                min_path_cost[target_root] &= min_path_cost[source_root];
                // Make the target root the parent of the source root
                parent[source_root] = target_root;
            }
        }

        // Prepare to store results for each query
        vector<int> result;
        for (auto& q : query) {
            int start = q[0], end = q[1];
            // If start and end nodes are the same, the cost is 0
            if (start == end) {
                result.push_back(0);
            } 
            // If start and end are not connected, return -1
            else if (find_root(start) != find_root(end)) {
                result.push_back(-1);
            } 
            // If connected, return the minimum path cost for the root of the start node
            else {
                result.push_back(min_path_cost[find_root(start)]);
            }
        }
        return result; // Return the results for all queries
    }
};
