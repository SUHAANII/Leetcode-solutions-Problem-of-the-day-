question: You are given two strings of the same length s1 and s2 and a string baseStr.

We say s1[i] and s2[i] are equivalent characters.

For example, if s1 = "abc" and s2 = "cde", then we have 'a' == 'c', 'b' == 'd', and 'c' == 'e'.
Equivalent characters follow the usual rules of any equivalence relation:

Reflexivity: 'a' == 'a'.
Symmetry: 'a' == 'b' implies 'b' == 'a'.
Transitivity: 'a' == 'b' and 'b' == 'c' implies 'a' == 'c'.
For example, given the equivalency information from s1 = "abc" and s2 = "cde", "acd" and "aab" are equivalent strings of baseStr = "eed", and "aab" is the lexicographically smallest equivalent string of baseStr.

Return the lexicographically smallest equivalent string of baseStr by using the equivalency information from s1 and s2.

code:

class Solution {
public:
    // DFS function to find the smallest lexicographical character in the connected component
    char dfs(unordered_map<char, vector<char>>& adj, char cur, vector<int>& vis) {
        // Mark the current character as visited
        vis[cur - 'a'] = 1;
        
        // Initialize minChar as the current character
        char minChar = cur;
        
        // Explore all neighbors of the current character
        for (char neighbor : adj[cur]) {
            // If the neighbor hasn't been visited yet
            if (vis[neighbor - 'a'] == 0) {
                // Recursively call dfs and update minChar with the smallest character found
                minChar = min(minChar, dfs(adj, neighbor, vis));
            }
        }
        
        // Return the smallest character found in this connected component
        return minChar;
    }

    // Function to find the smallest equivalent string based on the given equivalences
    string smallestEquivalentString(string s1, string s2, string baseStr) {
        int n = s1.length(); // Length of the equivalence strings
        unordered_map<char, vector<char>> adj; // Adjacency list for the equivalence graph

        // Step 1: Build the equivalence graph
        for (int i = 0; i < n; ++i) {
            char u = s1[i]; // Character from the first string
            char v = s2[i]; // Corresponding character from the second string
            
            // Add edges in both directions to represent equivalence
            adj[u].push_back(v);
            adj[v].push_back(u);
        }

        // Step 2: Replace each character in baseStr with its smallest equivalent character
        string result; // To store the final result
        for (char ch : baseStr) {
            // Create a visited array for each character in baseStr
            vector<int> vis(26, 0);
            // Find the smallest character in the connected component of 'ch'
            char minChar = dfs(adj, ch, vis);
            // Append the smallest character to the result
            result.push_back(minChar);
        }

        // Return the final smallest equivalent string
        return result;
    }
};
