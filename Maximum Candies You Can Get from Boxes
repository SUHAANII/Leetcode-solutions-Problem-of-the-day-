question: You have n boxes labeled from 0 to n - 1. You are given four arrays: status, candies, keys, and containedBoxes where:

status[i] is 1 if the ith box is open and 0 if the ith box is closed,
candies[i] is the number of candies in the ith box,
keys[i] is a list of the labels of the boxes you can open after opening the ith box.
containedBoxes[i] is a list of the boxes you found inside the ith box.
You are given an integer array initialBoxes that contains the labels of the boxes you initially have. You can take all the candies in any open box and you can use the keys in it to open new boxes and you also can use the boxes you find in it.

Return the maximum number of candies you can get following the rules above.

code:

class Solution {
public:
    // Function to calculate the maximum candies that can be collected
    int maxCandies(vector<int>& vis, vector<int>& candies, vector<vector<int>>& keys, vector<vector<int>>& containedBoxes, vector<int>& initialBoxes) {
        // Variable to track if any box is openable in the current iteration
        bool foundOpenable = true;
        // Variable to accumulate the total number of candies collected
        int totalCandies = 0;

        // Continue processing while there are boxes to open and at least one box is openable
        while (!initialBoxes.empty() && foundOpenable) {
            foundOpenable = false; // Reset the flag for this iteration
            vector<int> nextBoxes; // Vector to hold boxes for the next iteration

            // Iterate through the current set of initial boxes
            for (int boxId : initialBoxes) {
                // Check if the current box has been visited/opened
                if (vis[boxId]) {
                    foundOpenable = true; // Mark that we found an openable box
                    // Add all contained boxes from the current box to the nextBoxes
                    nextBoxes.insert(end(nextBoxes), begin(containedBoxes[boxId]), end(containedBoxes[boxId]));
                    
                    // Unlock all keys obtained from the current box
                    for (int keyId : keys[boxId]) vis[keyId] = 1;
                    
                    // Add the candies from the current box to the total
                    totalCandies += candies[boxId];
                } else {
                    // If the box is not openable, keep it for the next iteration
                    nextBoxes.push_back(boxId);
                }
            }
            // Prepare for the next iteration with the newly found boxes
            swap(initialBoxes, nextBoxes);
        }
        // Return the total number of candies collected
        return totalCandies;
    }
};
