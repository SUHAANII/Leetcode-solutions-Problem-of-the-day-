Question:  You have n boxes. You are given a binary string boxes of length n, where boxes[i] is '0' if the ith box is empty, and '1' if it contains one ball.

In one operation, you can move one ball from a box to an adjacent box. Box i is adjacent to box j if abs(i - j) == 1. Note that after doing so, there may be more than one ball in some boxes.

Return an array answer of size n, where answer[i] is the minimum number of operations needed to move all the balls to the ith box.

Each answer[i] is calculated considering the initial state of the boxes

code:

class Solution {
public:
    vector<int> minOperations(string boxes) {
        int n = boxes.size(); // Get the size of the input string (number of boxes)
        
        // Create vectors to store the number of operations required from the left and right
        vector<int> left(n, 0), right(n, 0), res(n, 0);
        
        // Initialize count for boxes with '1' starting from the left
        int count = (boxes.at(0) == '1' ? 1 : 0);

        // Calculate operations needed from the left side
        for (int i = 1; i < n; i++) {
            left[i] = left[i - 1] + count; // Accumulate the operations needed for the current box
            count += (boxes.at(i) == '1' ? 1 : 0); // Update count if the current box has a ball
        }

        // Re-initialize count for boxes with '1' starting from the right
        count = (boxes.at(n - 1) == '1' ? 1 : 0);

        // Calculate operations needed from the right side
        for (int i = n - 2; i >= 0; i--) {
            right[i] = right[i + 1] + count; // Accumulate operations needed for the current box
            count += (boxes.at(i) == '1' ? 1 : 0); // Update count if the current box has a ball
        }

        // Combine results from both sides to get the total operations for each box
        for (int i = 0; i < n; i++) {
            res[i] = left[i] + right[i]; // Total operations is the sum of left and right operations
        }

        return res; // Return the final result vector
    }
};
