question: You are given an integer eventTime denoting the duration of an event. You are also given two integer arrays startTime and endTime, each of length n.

These represent the start and end times of n non-overlapping meetings that occur during the event between time t = 0 and time t = eventTime, where the ith meeting occurs during the time [startTime[i], endTime[i]].

You can reschedule at most one meeting by moving its start time while maintaining the same duration, such that the meetings remain non-overlapping, to maximize the longest continuous period of free time during the event.

Return the maximum amount of free time possible after rearranging the meetings.

Note that the meetings can not be rescheduled to a time outside the event and they should remain non-overlapping.

Note: In this version, it is valid for the relative ordering of the meetings to change after rescheduling one meeting.

code:

class Solution {
public:
    int maxFreeTime(int eventTime, vector<int>& startTime, vector<int>& endTime) {
        int n = startTime.size(); // Get the number of events
        if (n == 0) return eventTime; // If there are no events, the entire event time is free

        // Create a vector to hold the gaps between events
        vector<int> gaps(n + 1, 0);
        gaps[0] = startTime[0]; // The gap before the first event

        // Calculate the gaps between consecutive events
        for (int i = 1; i < n; ++i)
            gaps[i] = startTime[i] - endTime[i - 1]; // Gap between the end of one event and the start of the next

        // The gap after the last event until the end of the event time
        gaps[n] = eventTime - endTime[n - 1];

        // Vector to hold the largest gap to the right of each position
        vector<int> largestRight(n + 1, 0);
        for (int i = n - 1; i >= 0; --i)
            largestRight[i] = max(largestRight[i + 1], gaps[i + 1]); // Fill largestRight with maximum gaps to the right

        int maxFree = 0; // Variable to store the maximum free time found
        int largestLeft = 0; // Variable to store the largest gap to the left

        // Iterate through the gaps to calculate maximum free time
        for (int i = 1; i <= n; ++i) {
            int duration = endTime[i - 1] - startTime[i - 1]; // Duration of the current event
            bool canFitLeft = largestLeft >= duration; // Check if the left gap can fit the current event
            bool canFitRight = largestRight[i] >= duration; // Check if the right gap can fit the current event

            // If the current event can fit in either left or right gap
            if (canFitLeft || canFitRight) {
                int merged = gaps[i - 1] + gaps[i] + duration; // Calculate total free time if the event is added
                maxFree = max(maxFree, merged); // Update maximum free time if it's larger
            }

            // Update maximum free time considering only the gaps
            maxFree = max(maxFree, gaps[i - 1] + gaps[i]);
            largestLeft = max(largestLeft, gaps[i - 1]); // Update the largest left gap
        }

        return maxFree; // Return the maximum free time found
    }
};
