question: You are given an integer array nums. You need to ensure that the elements in the array are distinct. To achieve this, you can perform the following operation any number of times:

Remove 3 elements from the beginning of the array. If the array has fewer than 3 elements, remove all remaining elements.
Note that an empty array is considered to have distinct elements. Return the minimum number of operations needed to make the elements in the array distinct.

code:

class Solution {
public:
    // Function to find the minimum number of operations to remove duplicates
    int minimumOperations(vector<int>& nums) {
        int n = nums.size(); // Get the size of the input array
        unordered_map<int, int> mp; // Create a hash map to track occurrences of numbers

        // Traverse the array from the end to the beginning
        for (int i = n - 1; i >= 0; i--) {
            // Check if the current number has been seen before
            if (mp.find(nums[i]) != mp.end()) {
                // If it has been seen, calculate the minimum operations needed
                // The number of operations is the index divided by 3 (as each operation can remove up to 3 duplicates) plus 1
                return i / 3 + 1;
            }
            // If it hasn't been seen, add it to the map
            mp[nums[i]]++;
        }

        // If no duplicates were found, return 0 (no operations needed)
        return 0;
    }
};
