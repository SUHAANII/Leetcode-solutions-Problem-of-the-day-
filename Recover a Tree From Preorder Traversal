Question: We run a preorder depth-first search (DFS) on the root of a binary tree.

At each node in this traversal, we output D dashes (where D is the depth of this node), then we output the value of this node.  If the depth of a node is D, the depth of its immediate child is D + 1.  The depth of the root node is 0.

If a node has only one child, that child is guaranteed to be the left child.

Given the output traversal of this traversal, recover the tree and return its root.

code:
class Solution {
public:
    int i = 0; // Global index to track the position in the string T

    // Function to recover the binary tree from the given preorder traversal string T
    TreeNode* recoverFromPreorder(string& T, int depth = 0) {
        if (i >= T.size()) return NULL; // Base case: if the index exceeds the string length, return NULL
        
        int D = 0; // Variable to count the number of dashes

        // Count the number of dashes to determine the current depth
        while (T[i] == '-') {
            D++, i++; // Increment D for each dash and move the index forward
        }

        // If the current depth is less than expected, reset i and return NULL
        if (D < depth) {
            i -= D; // Reset the index back by D positions
            return NULL; // No valid node at this depth, return NULL
        }

        // Read the node value (digits following the dashes)
        int x = 0; // Initialize the node value
        while (isdigit(T[i])) {
            x = x * 10 + T[i] - '0'; // Build the integer value from the characters
            i++; // Move to the next character
        }

        // Create a new TreeNode with the extracted value
        TreeNode* node = new TreeNode(x);

        // Recursively recover the left and right children, increasing the depth
        node->left = recoverFromPreorder(T, depth + 1); // Recover left child
        node->right = recoverFromPreorder(T, depth + 1); // Recover right child

        return node; // Return the constructed node
    }
};
