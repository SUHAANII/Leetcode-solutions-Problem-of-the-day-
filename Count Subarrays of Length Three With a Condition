question: Given an integer array nums, return the number of subarrays of length 3 such that the sum of the first and third numbers equals exactly half of the second number.

 

code:
class Solution {
public:
    // Function to count specific subarrays in the given vector
    int countSubarrays(vector<int>& nums, int count = 0) {
        // Iterate through the array, ensuring we don't go out of bounds
        for (int i = 0; i + 2 < nums.size(); i++) {
            // Check if the condition for the subarray is met
            // The condition checks if the middle element is the average of the two outer elements
            if (2 * (nums[i] + nums[i + 2]) == nums[i + 1]) {
                count++; // Increment count if the condition is true
            }
        }
        return count; // Return the total count of valid subarrays
    }
};
