question: You are given a string s. It may contain any number of '*' characters. Your task is to remove all '*' characters.

While there is a '*', do the following operation:

Delete the leftmost '*' and the smallest non-'*' character to its left. If there are several smallest characters, you can delete any of them.
Return the lexicographically smallest resulting string after removing all '*' characters.



code:
class Solution {
public:
    // Function to clear characters from the string based on asterisks
    string clearStars(string s) {
        // Get the size of the input string
        int n = s.size();
        
        // Min-heap to keep track of the smallest characters
        priority_queue<char, vector<char>, greater<char>> pq;  
        
        // Map to store the indices of each character in the string
        unordered_map<char, vector<int>> m;  
        
        // Vector to mark whether each character in s should be kept
        vector<bool> v(n, true);  

        // Iterate through the characters in the string
        for (int i = 0; i < n; i++) {
            if (s[i] == '*') { // If the current character is an asterisk
                if (!pq.empty()) { // Ensure there's a character to remove
                    char temp = pq.top();  // Get the smallest character so far
                    pq.pop();  // Remove it from the heap
                    int last = m[temp].back();  // Get the last occurrence index of this character
                    m[temp].pop_back();  // Remove this index from the map
                    v[i] = false;       // Mark the '*' for removal
                    v[last] = false;    // Mark the corresponding smallest character for removal
                }
            } else { // If the current character is not an asterisk
                pq.push(s[i]); // Add it to the min-heap
                m[s[i]].push_back(i); // Store its index in the map
            }
        }

        // Build the resulting string by including only the characters that are marked to be kept
        string result = "";
        for (int i = 0; i < n; i++) {
            if (v[i]) result += s[i]; // Append characters that are marked as true in v
        }
        
        return result; // Return the final cleaned string
    }
};

