question: On a social network consisting of m users and some friendships between users, two users can communicate with each other if they know a common language.

You are given an integer n, an array languages, and an array friendships where:

There are n languages numbered 1 through n,
languages[i] is the set of languages the i​​​​​​th​​​​ user knows, and
friendships[i] = [u​​​​​​i​​​, v​​​​​​i] denotes a friendship between the users u​​​​​​​​​​​i​​​​​ and vi.
You can choose one language and teach it to some users so that all friends can communicate with each other. Return the minimum number of users you need to teach.

Note that friendships are not transitive, meaning if x is a friend of y and y is a friend of z, this doesn't guarantee that x is a friend of z.

code:

#include <bits/stdc++.h>
using namespace std;

class Solution {
public:
    // Function to find the minimum number of users to teach a language
    int minimumTeachings(int totalLanguages, vector<vector<int>>& userLanguages, vector<vector<int>>& friendships) {
        // Set to keep track of users who need to be taught a language
        unordered_set<int> usersToTeach;

        // Step 1: Identify users who can't communicate
        for (auto& friendship : friendships) {
            int user1 = friendship[0] - 1; // Convert to 0-based index
            int user2 = friendship[1] - 1;
            bool canCommunicate = false;

            // Check if user1 and user2 can communicate with each other
            for (int lang1 : userLanguages[user1]) {
                for (int lang2 : userLanguages[user2]) {
                    if (lang1 == lang2) {
                        canCommunicate = true; // They share a common language
                        break;
                    }
                }
                if (canCommunicate) break; // Exit early if they can communicate
            }

            // If they cannot communicate, add both users to the set
            if (!canCommunicate) {
                usersToTeach.insert(user1);
                usersToTeach.insert(user2);
            }
        }

        // Step 2: Try teaching each language and count how many users need to be taught
        int minUsersToTeach = userLanguages.size() + 1; // Initialize with a large number

        // Iterate through each language from 1 to totalLanguages
        for (int language = 1; language <= totalLanguages; language++) {
            int count = 0; // Count of users who need to learn this language

            // Check each user who needs to be taught
            for (int user : usersToTeach) {
                bool knowsLanguage = false; // Track if the user knows the current language
                for (int lang : userLanguages[user]) {
                    if (lang == language) {
                        knowsLanguage = true; // User knows this language
                        break;
                    }
                }
                // If the user does not know the language, increment the count
                if (!knowsLanguage) count++;
            }

            // Update the minimum number of users to teach
            minUsersToTeach = min(minUsersToTeach, count);
        }

        // Return the minimum number of users that need to be taught a language
        return minUsersToTeach;
    }
};
