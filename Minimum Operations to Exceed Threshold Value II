Question: You are given a 0-indexed integer array nums, and an integer k.

In one operation, you will:

Take the two smallest integers x and y in nums.
Remove x and y from nums.
Add min(x, y) * 2 + max(x, y) anywhere in the array.
Note that you can only apply the described operation if nums contains at least two elements.

Return the minimum number of operations needed so that all elements of the array are greater than or equal to k.

 

code;
#include <iostream>
#include <vector>
#include <queue>

using namespace std;

class Solution {
public:
    static int minOperations(vector<int>& nums, int k) {
        // Min-heap to store the elements
        priority_queue<long long, vector<long long>, greater<>> pq(nums.begin(), nums.end());
        int ans = 0;

        // While the smallest element is less than k
        while (pq.top() < k) {
            long long x = pq.top(); pq.pop(); // Get the smallest element
            long long y = pq.top(); pq.pop(); // Get the second smallest element
            
            // Push the new element back into the heap
            pq.push(2 * x + y);
            ans++; // Increment operation count
        }
        
        return ans;  
    }
};

// Fast I/O initialization
auto init = []() {
    ios::sync_with_stdio(0);
    cin.tie(0);
    cout.tie(0);
    return 'c';
}();
