question: You are given a string array words, and an array groups, both arrays having length n.

The hamming distance between two strings of equal length is the number of positions at which the corresponding characters are different.

You need to select the longest subsequence from an array of indices [0, 1, ..., n - 1], such that for the subsequence denoted as [i0, i1, ..., ik-1] having length k, the following holds:

For adjacent indices in the subsequence, their corresponding groups are unequal, i.e., groups[ij] != groups[ij+1], for each j where 0 < j + 1 < k.
words[ij] and words[ij+1] are equal in length, and the hamming distance between them is 1, where 0 < j + 1 < k, for all indices in the subsequence.
Return a string array containing the words corresponding to the indices (in order) in the selected subsequence. If there are multiple answers, return any of them.

Note: strings in words may be unequal in length.

 



code:
class Solution {
public:
    // Function to check if two strings have a Hamming distance of exactly 1
    static bool hamming1(string& s, string& t) {
        const int sz = s.size(); // Get the size of the first string
        if (sz != t.size()) return 0; // If sizes are different, return false
        
        int diff = 0; // Initialize a counter for differences
        // Iterate through the characters of both strings
        for (int i = 0; i < sz && diff < 2; i++)
            diff += s[i] != t[i]; // Increment diff if characters are different
        
        return diff == 1; // Return true if there is exactly one difference
    }

    // Function to find the longest subsequence of words with specific group constraints
    static vector<string> getWordsInLongestSubsequence(vector<string>& words, vector<int>& groups) {
        const int n = words.size(); // Get the number of words
        int maxLen = 0; // Variable to track the maximum length of the subsequence
        int pos = -1; // Position of the last word in the longest subsequence

        // Dynamic programming array to store the length of the longest subsequence ending at each word
        int* dp = (int*)alloca(n * 4); // Allocate memory for dp array
        fill(dp, dp + n, 1); // Initialize all lengths to 1 (each word is a subsequence of length 1)

        // Array to reconstruct the longest subsequence
        int* prev = (int*)alloca(n * 4); // Allocate memory for prev array
        fill(prev, prev + n, -1); // Initialize previous indices to -1 (no predecessor)

        // Iterate through each word
        for (int i = 0; i < n; i++) {
            // Check all previous words
            for (int j = 0; j < i; j++) {
                // Check if the words are from different groups and have a Hamming distance of 1
                if (groups[i] != groups[j] && hamming1(words[i], words[j]) 
                    && dp[j] + 1 > dp[i]) {
                    dp[i] = dp[j] + 1; // Update the length of the longest subsequence ending at i
                    prev[i] = j; // Update the predecessor of i
                }
            }
            // Update maxLen and pos if a longer subsequence is found
            if (dp[i] > maxLen) {
                maxLen = dp[i]; // Update max length
                pos = i; // Update position of the last word in the longest subsequence
            }
        }

        // Reconstruct the longest subsequence
        vector<string> ans(maxLen); // Create a vector to hold the result
        for (; pos != -1; pos = prev[pos]) {
            ans[--maxLen] = words[pos]; // Fill the result vector in reverse order
        }

        return ans; // Return the longest subsequence
    }
};
