question; You are given a 0-indexed 2D integer array questions where questions[i] = [pointsi, brainpoweri].

The array describes the questions of an exam, where you have to process the questions in order (i.e., starting from question 0) and make a decision whether to solve or skip each question. Solving question i will earn you pointsi points but you will be unable to solve each of the next brainpoweri questions. If you skip question i, you get to make the decision on the next question.

For example, given questions = [[3, 2], [4, 3], [4, 4], [2, 5]]:
If question 0 is solved, you will earn 3 points but you will be unable to solve questions 1 and 2.
If instead, question 0 is skipped and question 1 is solved, you will earn 4 points but you will be unable to solve questions 2 and 3.
Return the maximum points you can earn for the exam.

 

code:

class Solution {
public:
    long long mostPoints(vector<vector<int>>& questions) {
        // Get the number of questions
        int n = questions.size();

        // Initialize DP array where dp[i] represents the maximum points
        // we can earn starting from the ith question
        // Using long long to handle potential large values
        vector<long long> dp(n,0);

        // Base case: For the last question, we just take its points value
        dp[n-1] = questions[n-1][0];

        // Fill the dp array from right to left (bottom-up approach)
        for(int i = n-2 ; i >= 0 ; i--) {
            int points = questions[i][0];
            int brainpower = questions[i][1];
        

        // Option 1: Solve the current question
        // We add the points of current question and the maximum points we can get
        // after skipping the next 'brainpower' questions
        int next_available_index = min(i + brainpower + 1 , n);
        long long solve_points = points + (next_available_index < n ? dp[next_available_index] : 0);

        // Option 2: Skip the current question
        // We take the maximum points we can get starting from the next question
        long long skip_points = dp[i+1];

        // The optimal strategy is to take the maximum of the two options
        dp[i] = max(solve_points,skip_points);

        }

        // dp[0] now contains the maximum points possible starting from the first question (with our bottom-up approach)
        return dp[0];

    }
};
