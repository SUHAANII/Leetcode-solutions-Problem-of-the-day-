Question: You are given an integer array nums. The absolute sum of a subarray [numsl, numsl+1, ..., numsr-1, numsr] is abs(numsl + numsl+1 + ... + numsr-1 + numsr).

Return the maximum absolute sum of any (possibly empty) subarray of nums.

Note that abs(x) is defined as follows:

If x is a negative integer, then abs(x) = -x.
If x is a non-negative integer, then abs(x) = x.

code:

class Solution {
public:
    int maxAbsoluteSum(vector<int>& nums) {
        // Initialize variables to track the cumulative sum and the minimum/maximum sums
        int sum = 0;      // Cumulative sum of the elements
        int minSum = 0;   // Minimum cumulative sum encountered
        int maxSum = 0;   // Maximum cumulative sum encountered
        
        // Iterate through each number in the input array
        for (int num : nums) {
            sum += num; // Update the cumulative sum with the current number
            
            // Update maxSum if the current cumulative sum is greater
            if (sum > maxSum) {
                maxSum = sum;
            }
            // Update minSum if the current cumulative sum is less
            if (sum < minSum) {
                minSum = sum;
            }
        }
        
        // Calculate and return the absolute difference between maxSum and minSum
        return abs(maxSum - minSum);
    }
};


