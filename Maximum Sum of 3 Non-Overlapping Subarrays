Question: Given an integer array nums and an integer k, find three non-overlapping subarrays of length k with maximum sum and return them.

Return the result as a list of indices representing the starting position of each interval (0-indexed). If there are multiple answers, return the lexicographically smallest one.

code:
// Function to find the indices of three non-overlapping subarrays of length k
vector<int> maxSumOfThreeSubarrays(vector<int>& nums, int k) {
    int n = nums.size(); // Size of the input array
    int sum1 = 0, sum2 = 0, sum3 = 0; // Sums of the three subarrays
    int max1 = 0, max12 = 0, max123 = 0; // Maximum sums for one, two, and three subarrays
    int index1 = 0, index12_1 = 0, index12_2 = k; // Indices for the best subarrays
    vector<int> ans = {0, k, 2 * k}; // Result vector to store the starting indices of the best subarrays

    // Calculate initial sums for the first k elements, the next k elements, and the next k elements
    for (int i = 0; i < k; i++) {
        sum1 += nums[i]; // Sum for the first subarray
        sum2 += nums[i + k]; // Sum for the second subarray
        sum3 += nums[i + 2 * k]; // Sum for the third subarray
    }

    // Initialize max sums with the initial sums
    max1 = sum1;
    max12 = sum1 + sum2;
    max123 = sum1 + sum2 + sum3;

    // Iterate through the array to find the maximum sums of non-overlapping subarrays
    for (int i = 0; i <= n - 3 * k; i++) {
        // Update the sums for the sliding window
        if (i > 0) {
            sum1 = sum1 - nums[i - 1] + nums[i + k - 1]; // Update sum1
            sum2 = sum2 - nums[i + k - 1] + nums[i + 2 * k - 1]; // Update sum2
            sum3 = sum3 - nums[i + 2 * k - 1] + nums[i + 3 * k - 1]; // Update sum3
        }

        // Update max1 and its index if a new maximum is found
        if (sum1 > max1) {
            max1 = sum1; // Update max1
            index1 = i; // Update the index of the first subarray
        }

        // Update max12 and its indices if a new maximum is found
        if (max1 + sum2 > max12) {
            max12 = max1 + sum2; // Update max12
            index12_1 = index1; // Update the index of the first subarray
            index12_2 = i + k; // Update the index of the second subarray
        }

        // Update max123 and the answer if a new maximum is found
        if (max12 + sum3 > max123) {
            max123 = max12 + sum3; // Update max123
            ans = {index12_1, index12_2, i + 2 * k}; // Store the indices of the best subarrays
        }
    }

    return ans; // Return the indices of the best three subarrays
}
