Question: You are given a 0-indexed string array words.

Let's define a boolean function isPrefixAndSuffix that takes two strings, str1 and str2:

isPrefixAndSuffix(str1, str2) returns true if str1 is both a 
prefix
 and a 
suffix
 of str2, and false otherwise.
For example, isPrefixAndSuffix("aba", "ababa") is true because "aba" is a prefix of "ababa" and also a suffix, but isPrefixAndSuffix("abc", "abcd") is false.

Return an integer denoting the number of index pairs (i, j) such that i < j, and isPrefixAndSuffix(words[i], words[j]) is true.

code:
#include <vector>
#include <string>

class Solution {
public:
    // Function to count pairs of words where one is a prefix and the other is a suffix
    int countPrefixSuffixPairs(std::vector<std::string>& words) {
        int n = words.size(); // Get the number of words
        int cnt = 0; // Initialize counter for valid pairs

        // Iterate through each word as the first word in the pair
        for (int i = 0; i < n; ++i) {
            // Iterate through each subsequent word as the second word in the pair
            for (int j = i + 1; j < n; ++j) {
                // Check if words[i] is both a prefix and a suffix of words[j]
                if (isPrefixAndSuffix(words[i], words[j])) {
                    ++cnt; // Increment the count if the condition is met
                }
            }
        }

        return cnt; // Return the total count of valid pairs
    }

private:
    // Helper function to check if str1 is both a prefix and a suffix of str2
    bool isPrefixAndSuffix(const std::string& str1, const std::string& str2) {
        // Check if str1 is a prefix of str2
        // rfind(str1, 0) checks if str1 starts at the beginning of str2
        // This returns the starting index if found, or std::string::npos if not found
        return str2.rfind(str1, 0) == 0 && 
               // Check if str1 is a suffix of str2
               // find(str1, str2.size() - str1.size()) checks if str1 appears at the end of str2
               str2.find(str1, str2.size() - str1.size()) != std::string::npos; 
    }
};
