question: There is a game dungeon comprised of n x n rooms arranged in a grid.

You are given a 2D array fruits of size n x n, where fruits[i][j] represents the number of fruits in the room (i, j). Three children will play in the game dungeon, with initial positions at the corner rooms (0, 0), (0, n - 1), and (n - 1, 0).

The children will make exactly n - 1 moves according to the following rules to reach the room (n - 1, n - 1):

The child starting from (0, 0) must move from their current room (i, j) to one of the rooms (i + 1, j + 1), (i + 1, j), and (i, j + 1) if the target room exists.
The child starting from (0, n - 1) must move from their current room (i, j) to one of the rooms (i + 1, j - 1), (i + 1, j), and (i + 1, j + 1) if the target room exists.
The child starting from (n - 1, 0) must move from their current room (i, j) to one of the rooms (i - 1, j + 1), (i, j + 1), and (i + 1, j + 1) if the target room exists.
When a child enters a room, they will collect all the fruits there. If two or more children enter the same room, only one child will collect the fruits, and the room will be emptied after they leave.

Return the maximum number of fruits the children can collect from the dungeon.

code:

class Solution {
public:
    int maxCollectedFruits(vector<vector<int>>& grid) {
        // Get the size of the grid (assuming it's square)
        int n = grid.size(), res = 0;

        // Calculate the sum of the diagonal elements (top-left to bottom-right)
        for (int i = 0; i < n; i++) {
            res += grid[i][i]; // Collect fruits from the diagonal
        }

        // Iterate twice: first for the original grid, second for the transposed grid
        for (int pass = 0; pass < 2; pass++) {
            // Transpose the grid in the second pass
            if (pass == 1) {
                for (int i = 0; i < n; i++) {
                    for (int j = i + 1; j < n; j++) {
                        swap(grid[i][j], grid[j][i]); // Swap elements to transpose
                    }
                }
            }

            // Initialize previous and current rows for dynamic programming
            vector<int> prev(n, -1), curr(n, -1);
            prev[n - 1] = grid[0][n - 1]; // Start from the top-right corner

            // Iterate through rows, starting from the second row to the second last
            for (int row = 1; row < n - 1; row++) {
                fill(curr.begin(), curr.end(), -1); // Reset current row
                // Process each column in the current row
                for (int i = 0; i < n; i++) {
                    if (prev[i] < 0) continue; // Skip if no fruits collected from previous row

                    // Collect fruits from the left cell (i-1)
                    if (i > 0) 
                        curr[i - 1] = max(curr[i - 1], prev[i] + grid[row][i - 1]);
                    
                    // Collect fruits from the right cell (i+1)
                    if (i < n - 1) 
                        curr[i + 1] = max(curr[i + 1], prev[i] + grid[row][i + 1]);
                    
                    // Collect fruits from the current cell (i)
                    curr[i] = max(curr[i], prev[i] + grid[row][i]);
                }
                // Move current results to previous for the next row iteration
                swap(prev, curr);
            }
            // Add the maximum fruits collected from the last row to the result
            res += prev[n - 1];
        }
        // Return the total maximum fruits collected
        return res;
    }
};
