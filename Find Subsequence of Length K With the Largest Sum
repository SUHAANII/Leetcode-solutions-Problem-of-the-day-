question: You are given an integer array nums and an integer k. You want to find a subsequence of nums of length k that has the largest sum.

Return any such subsequence as an integer array of length k.

A subsequence is an array that can be derived from another array by deleting some or no elements without changing the order of the remaining elements.

code:

class Solution {
public:
    // Function to find the maximum subsequence of length k from the given array 'nums'
    vector<int> maxSubsequence(vector<int>& nums, int k) {
        // Step 1: Create a vector of pairs to store each number along with its original index
        vector<pair<int, int>> numsWithIndices;
        for (int i = 0; i < nums.size(); i++) {
            numsWithIndices.push_back({nums[i], i}); // Store the number and its index as a pair
        }

        // Step 2: Sort the pairs by the number (first element of the pair) in descending order
        sort(numsWithIndices.begin(), numsWithIndices.end(),
             [](const pair<int, int>& a, const pair<int, int>& b) {
                 return a.first > b.first; // Comparison based on the first element
             });

        // Step 3: Take the top k elements from the sorted list
        vector<pair<int, int>> topK(numsWithIndices.begin(), numsWithIndices.begin() + k);

        // Step 4: Sort the top k elements by their original indices to maintain the order in the result
        sort(topK.begin(), topK.end(),
             [](const pair<int, int>& a, const pair<int, int>& b) {
                 return a.second < b.second; // Comparison based on the second element (original index)
             });

        // Step 5: Extract the values from the sorted top k pairs into the result vector
        vector<int> result;
        for (auto& p : topK) {
            result.push_back(p.first); // Push the first element (the number) into the result
        }

        // Step 6: Return the result vector containing the maximum subsequence
        return result;
    }
};
