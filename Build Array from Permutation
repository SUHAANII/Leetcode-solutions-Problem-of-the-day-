qustion: 
Given a zero-based permutation nums (0-indexed), build an array ans of the same length where ans[i] = nums[nums[i]] for each 0 <= i < nums.length and return it.

A zero-based permutation nums is an array of distinct integers from 0 to nums.length - 1 (inclusive).

code:

class Solution {
public:
    // Function to build a new array based on the input array
    vector<int> buildArray(vector<int>& nums) {
        // Get the size of the input array
        int n = nums.size();

        // First pass: Modify the original array to store both old and new values
        for (int i = 0; i < n; i++) {
            // Calculate the new value based on the current value
            // newVal is the value at the index specified by nums[i]
            int newVal = nums[nums[i]] % n;

            // Update nums[i] to store the new value while keeping the old value
            // We multiply the new value by n to distinguish it from the old value
            nums[i] += newVal * n;
        }

        // Second pass: Divide each element by n to retrieve the new values
        for (int i = 0; i < n; i++) {
            // Retrieve the new value by dividing by n
            nums[i] /= n;
        }

        // Return the modified array which now contains the new values
        return nums;
    }
};
