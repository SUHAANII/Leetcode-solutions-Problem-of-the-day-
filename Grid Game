Question: You are given a 0-indexed 2D array grid of size 2 x n, where grid[r][c] represents the number of points at position (r, c) on the matrix. Two robots are playing a game on this matrix.

Both robots initially start at (0, 0) and want to reach (1, n-1). Each robot may only move to the right ((r, c) to (r, c + 1)) or down ((r, c) to (r + 1, c)).

At the start of the game, the first robot moves from (0, 0) to (1, n-1), collecting all the points from the cells on its path. For all cells (r, c) traversed on the path, grid[r][c] is set to 0. Then, the second robot moves from (0, 0) to (1, n-1), collecting the points on its path. Note that their paths may intersect with one another.

The first robot wants to minimize the number of points collected by the second robot. In contrast, the second robot wants to maximize the number of points it collects. If both robots play optimally, return the number of points collected by the second robot.

code:

class Solution {
public:
    long long gridGame(vector<vector<int>>& grid) {
        // Initialize min_result to a large number to find the minimum maximum score.
        long long min_result = LLONG_MAX;  
        
        // Calculate the initial sum of the top row.
        long long row1_sum = accumulate(grid[0].begin(), grid[0].end(), 0LL);  
        
        // Initialize the bottom row sum to 0.
        long long row2_sum = 0;  

        // Iterate through each column of the grid.
        for (int i = 0; i < grid[0].size(); ++i) {
            // Move the top player forward by subtracting the current column value.
            row1_sum -= grid[0][i];  
            
            // Update the minimum of the maximum scores between the two players.
            min_result = min(min_result, max(row1_sum, row2_sum));  
            
            // Move the bottom player forward by adding the current column value.
            row2_sum += grid[1][i];  
        }

        // Return the minimum maximum score obtained.
        return min_result;  
    }
};
