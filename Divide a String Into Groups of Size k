question: A string s can be partitioned into groups of size k using the following procedure:

The first group consists of the first k characters of the string, the second group consists of the next k characters of the string, and so on. Each element can be a part of exactly one group.
For the last group, if the string does not have k characters remaining, a character fill is used to complete the group.
Note that the partition is done so that after removing the fill character from the last group (if it exists) and concatenating all the groups in order, the resultant string should be s.

Given the string s, the size of each group k and the character fill, return a string array denoting the composition of every group s has been divided into, using the above procedure.

 

code:

class Solution {
public:
    vector<string> divideString(string &s, int k, char fill) {
        // Calculate the quotient (q) and remainder (r) when dividing the string size by k
        auto [q, r] = div(s.size(), k);
        
        // Create a vector to hold the resulting substrings
        // The size is q + 1 if there is a remainder (r > 0), otherwise it's just q
        vector<string> ans(q + (r > 0)); 
        
        // Loop to fill the vector with substrings of length k
        for (int i = 0; i < q; i++) {
            ans[i] = s.substr(i * k, k); // Extract substring starting at i*k of length k
        }
        
        // If there is a remainder, handle the last substring
        if (r > 0) {
            ans.back() = s.substr(q * k); // Get the last substring from the remaining characters
            ans.back() += string(k - r, fill); // Fill the rest with the specified fill character
        }
        
        // Return the vector of substrings
        return ans;
    }
};
