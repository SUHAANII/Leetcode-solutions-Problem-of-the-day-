question: You are given an integer array nums of size n where n is a multiple of 3 and a positive integer k.

Divide the array nums into n / 3 arrays of size 3 satisfying the following condition:

The difference between any two elements in one array is less than or equal to k.
Return a 2D array containing the arrays. If it is impossible to satisfy the conditions, return an empty array. And if there are multiple answers, return any of them.

code:  

class Solution {
public:
    // Function to divide the array into groups of three integers
    vector<vector<int>> divideArray(vector<int>& nums, int k) {
        // Vector to hold the result groups of three integers
        vector<vector<int>> ans;

        // Sort the input array to facilitate grouping
        ranges::sort(nums);

        // Iterate through the sorted array, stepping by 3
        for (int i = 2; i < nums.size(); i += 3) {
            // Check if the difference between the maximum and minimum of the group exceeds k
            if (nums[i] - nums[i - 2] > k)
                return {}; // If it does, return an empty vector (no valid grouping)

            // Add the current group of three integers to the result
            ans.push_back({nums[i - 2], nums[i - 1], nums[i]});
        }

        // Return the result containing the groups of three integers
        return ans;
    }
};
