Question: You are given a map of a server center, represented as a m * n integer matrix grid, where 1 means that on that cell there is a server and 0 means that it is no server. Two servers are said to communicate if they are on the same row or on the same column.

Return the number of servers that communicate with any other server.

code:
class Solution {
public:
    int countServers(vector<vector<int>>& grid) {
        // Step 1: Initialize vectors to hold the count of servers in each row and column
        vector<int> Rows(grid.size()); // To count servers in each row
        vector<int> Col(grid[0].size()); // To count servers in each column
        
        // Step 2: Calculate row and column sums
        for (int i = 0; i < grid.size(); i++) {
            for (int j = 0; j < grid[0].size(); j++) {
                // Increment the row count if there is a server (1) in the cell
                Rows[i] += grid[i][j];
                // Increment the column count if there is a server (1) in the cell
                Col[j] += grid[i][j];
            }
        }
        
        // Step 3: Count the servers that can communicate
        int ans = 0; // Initialize the answer counter
        for (int i = 0; i < grid.size(); i++) {
            for (int j = 0; j < grid[0].size(); j++) {
                // Check if the current cell has a server (1)
                // and if there is at least one other server in its row or column
                if (grid[i][j] == 1 && (Rows[i] > 1 || Col[j] > 1)) {
                    ans++; // Increment the count of communicable servers
                }
            }
        }
        
        // Step 4: Return the final count of servers that can communicate
        return ans;
    }
};

