question: Given an integer array nums and an integer k, return the number of good subarrays of nums.

A subarray arr is good if there are at least k pairs of indices (i, j) such that i < j and arr[i] == arr[j].

A subarray is a contiguous non-empty sequence of elements within an array.

 
code:

class Solution {
public:
    long long countGood(vector<int>& nums, int k) {
        // Map to keep track of the frequency of each number
        unordered_map<int, int> freq;
        int left = 0; // Left pointer for the sliding window
        long long pairCount = 0; // Count of pairs formed
        long long goodSubarrays = 0; // Count of good subarrays

        // Iterate with the right pointer through the array
        for (int right = 0; right < nums.size(); ++right) {
            // Add the number of pairs formed by the current right element
            pairCount += freq[nums[right]];
            // Increment the frequency of the current number
            freq[nums[right]]++;

            // While the number of pairs is greater than or equal to k
            while (pairCount >= k) {
                // Count the number of good subarrays ending at 'right'
                goodSubarrays += nums.size() - right;
                // Decrease the frequency of the leftmost element in the window
                freq[nums[left]]--;
                // Update the pair count by removing pairs contributed by the leftmost element
                pairCount -= freq[nums[left]];
                // Move the left pointer to the right
                left++;
            }
        }

        // Return the total count of good subarrays
        return goodSubarrays;
    }
};
