question:You are given an n x n square matrix of integers grid. Return the matrix such that:

The diagonals in the bottom-left triangle (including the middle diagonal) are sorted in non-increasing order.
The diagonals in the top-right triangle are sorted in non-decreasing order.


code:

class Solution {
public:
    vector<vector<int>> sortMatrix(vector<vector<int>>& grid) {
        // Get the dimensions of the grid
        int n = grid.size();       // Number of rows
        int m = grid[0].size();    // Number of columns

        // Create two unordered maps to store max heaps and min heaps
        unordered_map<int, priority_queue<int>> maxHeaps; // For keys >= 0 (max heaps)
        unordered_map<int, priority_queue<int, vector<int>, greater<int>>> minHeaps; // For keys < 0 (min heaps)

        // Populate the heaps based on the key (i - j)
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                int key = i - j; // Calculate the key based on the current indices
                if (key < 0) {
                    // If key is negative, push into min heap
                    minHeaps[key].push(grid[i][j]);
                } else {
                    // If key is non-negative, push into max heap
                    maxHeaps[key].push(grid[i][j]);
                }
            }
        }

        // Refill the grid with sorted values from the heaps
        for (int i = 0; i < n; i++) {
            for (int j = 0; j < m; j++) {
                int key = i - j; // Calculate the key again for the current position
                if (key < 0) {
                    // Pop from min heap for negative keys
                    grid[i][j] = minHeaps[key].top(); // Get the smallest element
                    minHeaps[key].pop(); // Remove the element from the heap
                } else {
                    // Pop from max heap for non-negative keys
                    grid[i][j] = maxHeaps[key].top(); // Get the largest element
                    maxHeaps[key].pop(); // Remove the element from the heap
                }
            }
        }
        // Return the sorted grid
        return grid;
    }
};
