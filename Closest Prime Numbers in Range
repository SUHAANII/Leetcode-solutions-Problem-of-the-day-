Question: Given two positive integers left and right, find the two integers num1 and num2 such that:

left <= num1 < num2 <= right .
Both num1 and num2 are prime numbers.
num2 - num1 is the minimum amongst all other pairs satisfying the above conditions.
Return the positive integer array ans = [num1, num2]. If there are multiple pairs satisfying these conditions, return the one with the smallest num1 value. If no such numbers exist, return [-1, -1].

code:

class Solution {
public:
    // Function to find the closest prime numbers in a given range [left, right]
    vector<int> closestPrimes(int left, int right) {
        // Create a boolean vector for the Sieve of Eratosthenes
        vector<bool> sieve(right + 1, true);
        sieve[0] = sieve[1] = false; // 0 and 1 are not prime numbers
        
        // Implement the Sieve of Eratosthenes
        for (int i = 2; i * i <= right; ++i) {
            if (sieve[i]) { // If i is prime
                // Mark all multiples of i as non-prime
                for (int j = i * i; j <= right; j += i) {
                    sieve[j] = false;
                }
            }
        }
        
        // Collect all prime numbers within the specified range
        vector<int> primes;
        for (int i = left; i <= right; ++i) {
            if (sieve[i]) {
                primes.push_back(i); // Add prime number to the list
            }
        }
        
        // If there are less than two primes, return {-1, -1}
        if (primes.size() < 2) {
            return {-1, -1};
        }
        
        // Initialize variables to find the minimum gap between primes
        int min_gap = INT_MAX; // Start with the maximum possible integer
        vector<int> result = {-1, -1}; // To store the result
        
        // Iterate through the list of primes to find the closest pair
        for (int i = 1; i < primes.size(); ++i) {
            // Calculate the gap between consecutive primes
            int gap = primes[i] - primes[i - 1];
            // Update the result if the current gap is smaller than the minimum gap found
            if (gap < min_gap) {
                min_gap = gap;
                result = {primes[i - 1], primes[i]}; // Store the closest prime pair
            }
        }
        
        // Return the closest prime pair found
        return result;
    }
};
