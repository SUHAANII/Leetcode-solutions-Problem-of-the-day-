Question:  You are given a 0-indexed array of strings words and a 2D array of integers queries.

Each query queries[i] = [li, ri] asks us to find the number of strings present in the range li to ri (both inclusive) of words that start and end with a vowel.

Return an array ans of size queries.length, where ans[i] is the answer to the ith query.

Note that the vowel letters are 'a', 'e', 'i', 'o', and 'u'.
logic:
Prefix sum analogy:
Imagine a running tally ðŸ§® where you keep adding the count of vowel-strings as you go through the list. This allows you to answer any query in constant time.

Prefix sum structure:
Build a Prefix array where Prefix[i] stores the total number of vowel-strings from the start up to index i-1.
For any range [L, R], the result can be calculated as:
Result =Prefix[R + 1] - Prefix[L]
This way, we avoid recalculating the counts for each query.
code: 

class Solution {
public:
    vector<int> vowelStrings(vector<string>& words, vector<vector<int>>& queries) {
        // Get the number of words in the input vector
        int n = words.size();
        // Create a prefix sum array to count words that start and end with vowels
        vector<int> Prefix(n + 1, 0);
        // Define a set of vowels for easy checking
        unordered_set<char> vowels = {'a', 'e', 'i', 'o', 'u'}; 
        
        // Build the prefix sum array
        for (int i = 0; i < n; i++) {
            // Carry forward the previous count
            Prefix[i + 1] = Prefix[i];
            // Check if the first and last characters of the word are vowels
            if (vowels.count(words[i].front()) && vowels.count(words[i].back())) {
                // Increment the prefix sum if the condition is met
                Prefix[i + 1]++;  
            }
        }
        
        // Vector to store the results for each query
        vector<int> ANS; 
        // Process each query
        for (auto& query : queries) {
            int L = query[0], R = query[1];  
            // Calculate the number of valid words in the range [L, R]
            ANS.push_back(Prefix[R + 1] - Prefix[L]);  
        }

        // Return the results for all queries
        return ANS;  
    }
};


