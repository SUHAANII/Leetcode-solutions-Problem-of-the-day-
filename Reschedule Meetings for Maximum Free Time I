question: You are given an integer eventTime denoting the duration of an event, where the event occurs from time t = 0 to time t = eventTime.

You are also given two integer arrays startTime and endTime, each of length n. These represent the start and end time of n non-overlapping meetings, where the ith meeting occurs during the time [startTime[i], endTime[i]].

You can reschedule at most k meetings by moving their start time while maintaining the same duration, to maximize the longest continuous period of free time during the event.

The relative order of all the meetings should stay the same and they should remain non-overlapping.

Return the maximum amount of free time possible after rearranging the meetings.

Note that the meetings can not be rescheduled to a time outside the event.

code:

class Solution {
public:
    int maxFreeTime(int eventTime, int k, vector<int>& startTime, vector<int>& endTime) {
        int count = startTime.size(); // Get the number of events
        vector<int> prefixSum(count + 1, 0); // Initialize prefix sum array
        int maxFree = 0; // Variable to track the maximum free time

        // Calculate the prefix sum of occupied time
        for (int i = 0; i < count; ++i) {
            prefixSum[i + 1] = prefixSum[i] + (endTime[i] - startTime[i]);
        }

        // Iterate over the events to find the maximum free time
        for (int i = k - 1; i < count; ++i) {
            // Calculate the total occupied time in the current window of k events
            int occupied = prefixSum[i + 1] - prefixSum[i - k + 1];

            // Determine the end of the current time window
            int windowEnd = (i == count - 1) ? eventTime : startTime[i + 1];

            // Determine the start of the current time window
            int windowStart = (i == k - 1) ? 0 : endTime[i - k];

            // Calculate the free time in the current window
            int freeTime = windowEnd - windowStart - occupied;

            // Update the maximum free time found
            maxFree = max(maxFree, freeTime);
        }

        return maxFree; // Return the maximum free time
    }
};
