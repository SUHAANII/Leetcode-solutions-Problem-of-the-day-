question: You are given two integers n and maxValue, which are used to describe an ideal array.

A 0-indexed integer array arr of length n is considered ideal if the following conditions hold:

Every arr[i] is a value from 1 to maxValue, for 0 <= i < n.
Every arr[i] is divisible by arr[i - 1], for 0 < i < n.
Return the number of distinct ideal arrays of length n. Since the answer may be very large, return it modulo 109 + 7.

 

code:
const int mod = 1e9 + 7; // Define a constant for modulo operations to prevent overflow
int factMemo[100000] = {}; // Array to store factorial values for memoization
int dp[100000][15]; // DP table to store counts of ideal arrays
using ll = long long; // Define ll as a shorthand for long long

class Solution {
public:
    // Function to compute a^b % m using fast exponentiation
    ll power(ll a, ll b, ll m = mod) {
        ll res = 1; // Initialize result
        while (b > 0) { // While exponent is greater than 0
            if (b & 1) // If b is odd
                res = (res * a) % m; // Multiply result by a
            a = (a * a) % m; // Square a
            b = b >> 1; // Divide b by 2
        }
        return res; // Return the result
    }

    // Function to compute factorial of n % mod using memoization
    ll fact(ll n) {
        if (n == 0) return 1; // Base case: 0! = 1
        if (factMemo[n]) return factMemo[n]; // Return cached value if exists
        factMemo[n] = (n * fact(n - 1)) % mod; // Compute factorial and store it
        return factMemo[n]; // Return the computed factorial
    }

    // Function to compute modular inverse using factorials
    ll mod_inv(ll a, ll b) {
        // Calculate C(a, b) = a! / (b! * (a-b)!)
        return (((fact(a) * power(fact(b), mod - 2)) % mod) * power(fact(a - b), mod - 2)) % mod;
    }

    // Main function to calculate the number of ideal arrays
    int idealArrays(int n, int maxi) {
        // Initialize the DP table
        for (int i = 1; i <= maxi; i++)
            for (int j = 1; j <= min(n, 14); j++)
                dp[i][j] = 0; // Set all values to 0

        // Populate the DP table
        for (int i = 1; i <= maxi; i++) {
            dp[i][1] = 1; // Base case: 1 way to form an array of length 1
            for (int j = 2; j * i <= maxi; j++) // For multiples of i
                for (int k = 1; k < min(n, 14); k++) // For lengths up to min(n, 14)
                    dp[i * j][k + 1] += dp[i][k]; // Update counts of ideal arrays
        }

        ll res = 0; // Initialize result
        // Calculate the final result using the DP table and modular inverses
        for (int i = 1; i <= maxi; i++)
            for (int j = 1; j <= min(n, 14); j++)
                // Add contribution of each ideal array to the result
                res = (res + mod_inv(n - 1, n - j) * dp[i][j]) % mod;

        return res; // Return the final count of ideal arrays
    } 
};


