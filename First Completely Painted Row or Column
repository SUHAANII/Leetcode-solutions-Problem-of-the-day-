  Question: You are given a 0-indexed integer array arr, and an m x n integer matrix mat. arr and mat both contain all the integers in the range [1, m * n].

Go through each index i in arr starting from index 0 and paint the cell in mat containing the integer arr[i].

Return the smallest index i at which either a row or a column will be completely painted in mat

code: 

class Solution {
public:
    int firstCompleteIndex(vector<int>& arr, vector<vector<int>>& mat) {
        // Get the number of rows and columns in the matrix
        int rows = mat.size(), cols = mat[0].size();
        
        // Map to store the position of each number in the matrix
        unordered_map<int, pair<int, int>> positionMap;
        
        // Vectors to count remaining numbers in each row and column
        vector<int> rowCount(rows, cols); // Initially, each row has 'cols' numbers
        vector<int> colCount(cols, rows); // Initially, each column has 'rows' numbers

        // Populate the positionMap with the positions of each number in the matrix
        for (int r = 0; r < rows; ++r) {
            for (int c = 0; c < cols; ++c) {
                positionMap[mat[r][c]] = {r, c}; // Store the position of mat[r][c]
            }
        }

        // Iterate through the 'arr' to mark numbers and check for complete rows/columns
        for (int idx = 0; idx < arr.size(); ++idx) {
            int val = arr[idx]; // Get the current number from arr
            auto [row, col] = positionMap[val]; // Find its position in the matrix

            // Decrement the count for the corresponding row and column
            if (--rowCount[row] == 0 || --colCount[col] == 0) {
                // If a row or column count reaches zero, return the current index
                return idx;
            }
        }

        // If no complete row or column is found, return -1
        return -1;
    }
};
