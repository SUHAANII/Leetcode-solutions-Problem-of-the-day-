question: You are given a string array words and a binary array groups both of length n, where words[i] is associated with groups[i].

Your task is to select the longest alternating subsequence from words. A subsequence of words is alternating if for any two consecutive strings in the sequence, their corresponding elements in the binary array groups differ. Essentially, you are to choose strings such that adjacent elements have non-matching corresponding bits in the groups array.

Formally, you need to find the longest subsequence of an array of indices [0, 1, ..., n - 1] denoted as [i0, i1, ..., ik-1], such that groups[ij] != groups[ij+1] for each 0 <= j < k - 1 and then find the words corresponding to these indices.

Return the selected subsequence. If there are multiple answers, return any of them.

Note: The elements in words are distinct.



code:
class Solution {
public:
    // Function to get the longest subsequence from the words based on the groups
    static vector<string> getLongestSubsequence(vector<string>& words, vector<int>& groups) {
        const int n = groups.size(); // Get the size of the groups vector
        int prev = groups[0]; // Initialize prev with the first group
        int len = 1; // Initialize length of the resultant subsequence to 1 (first word is always included)

        // Iterate through the groups starting from the second element
        for (int i = 1, j = 1; i < n; i++) {
            // Skip over all elements in groups that are the same as prev
            while (i < n && prev == groups[i])
                i++;

            // If we haven't reached the end of the groups
            if (i < n) {
                // Assign the current word to the new position in the words vector
                words[j++] = words[i]; 
                len++; // Increment the length of the resultant subsequence
                prev = groups[i]; // Update prev to the current group
            }
        }

        // Resize the words vector to the length of the resultant subsequence
        words.resize(len);
        return words; // Return the modified words vector
    }
};
