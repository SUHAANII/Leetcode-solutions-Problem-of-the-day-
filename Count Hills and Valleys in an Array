question: You are given a 0-indexed integer array nums. An index i is part of a hill in nums if the closest non-equal neighbors of i are smaller than nums[i]. Similarly, an index i is part of a valley in nums if the closest non-equal neighbors of i are larger than nums[i]. Adjacent indices i and j are part of the same hill or valley if nums[i] == nums[j].

Note that for an index to be part of a hill or valley, it must have a non-equal neighbor on both the left and right of the index.

Return the number of hills and valleys in nums.

code:

class Solution {
public:
    int countHillValley(std::vector<int>& nums) {
        int count = 0;           // Initialize a counter for hills and valleys
        int left = 0;            // Initialize the left index to track the previous unique element

        // Iterate through the array starting from the second element and ending at the second-to-last element
        for (int i = 1; i < nums.size() - 1; ++i) {
            // Check if the current element is different from the next element
            if (nums[i] != nums[i + 1]) {
                // Check if the current element is a hill or a valley
                if ((nums[i] > nums[left] && nums[i] > nums[i + 1]) ||  // Hill condition
                    (nums[i] < nums[left] && nums[i] < nums[i + 1])) { // Valley condition
                    ++count;  // Increment the count if a hill or valley is found
                }
                left = i;  // Update the left index to the current index
            }
        }

        return count;  // Return the total count of hills and valleys
    }
};
