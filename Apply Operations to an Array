Question: You are given a 0-indexed array nums of size n consisting of non-negative integers.

You need to apply n - 1 operations to this array where, in the ith operation (0-indexed), you will apply the following on the ith element of nums:

If nums[i] == nums[i + 1], then multiply nums[i] by 2 and set nums[i + 1] to 0. Otherwise, you skip this operation.
After performing all the operations, shift all the 0's to the end of the array.

For example, the array [1,0,2,0,0,1] after shifting all its 0's to the end, is [1,2,1,0,0,0].
Return the resulting array.

Note that the operations are applied sequentially, not all at once

code:

class Solution {
public:
    vector<int> applyOperations(vector<int>& nums) {
        int n = nums.size(); // Get the size of the input vector
        vector<int> newNums(n, 0); // Initialize a new vector to hold the results
        int count = 0; // Counter to track the position in newNums

        // Iterate through the nums vector, excluding the last element
        for (int i = 0; i < n - 1; i++) {
            // Check if the current element is not zero
            if (nums[i] != 0) {
                // Check if the current element is equal to the next one
                if (nums[i] == nums[i + 1]) {
                    // If they are equal, combine them (double the value)
                    newNums[count] = nums[i] * 2; 
                    nums[i + 1] = 0; // Set the next element to zero (it has been combined)
                    i++; // Move to the next element (skip the next one since it was combined)
                } else {
                    // If they are not equal, just copy the current element
                    newNums[count] = nums[i]; 
                }
                count++; // Increment the count for newNums
            }
        }

        // Check if the last element is not zero and add it to newNums
        if (nums[n - 1] != 0) {
            newNums[count++] = nums[n - 1]; // Add the last element to newNums if it's not zero
        }

        return newNums; // Return the resulting vector
    }
};
