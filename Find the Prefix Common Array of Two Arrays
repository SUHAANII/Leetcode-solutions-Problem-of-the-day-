question: You are given two 0-indexed integer permutations A and B of length n.

A prefix common array of A and B is an array C such that C[i] is equal to the count of numbers that are present at or before the index i in both A and B.

Return the prefix common array of A and B.

A sequence of n integers is called a permutation if it contains all integers from 1 to n exactly once.

code:
// Function to find the prefix common array
    vector<int> findThePrefixCommonArray(vector<int>& A, vector<int>& B) {
        int n = A.size(); // Get the size of the input arrays
        vector<int> freq(n + 1, 0); // Frequency array to count occurrences of numbers
        vector<int> ans; // Vector to store the result
        int common = 0; // Variable to keep track of the number of common elements
        
        // Iterate through each index of the arrays
        for (int i = 0; i < n; i++) {
            // Increment frequency for the current element in A
            // If it becomes 2, it means this element is common in both A and B
            if (++freq[A[i]] == 2) common++; 
            
            // Increment frequency for the current element in B
            // Similarly, check if it becomes common
            if (++freq[B[i]] == 2) common++; 
            
            // Store the current count of common elements in the answer vector
            ans.push_back(common);
        }
        
        // Return the vector containing the count of common elements for each prefix
        return ans;
    }
};
