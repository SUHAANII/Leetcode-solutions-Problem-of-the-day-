question: You are given an integer n representing the dimensions of an n x n grid, with the origin at the bottom-left corner of the grid. You are also given a 2D array of coordinates rectangles, where rectangles[i] is in the form [startx, starty, endx, endy], representing a rectangle on the grid. Each rectangle is defined as follows:

(startx, starty): The bottom-left corner of the rectangle.
(endx, endy): The top-right corner of the rectangle.
Note that the rectangles do not overlap. Your task is to determine if it is possible to make either two horizontal or two vertical cuts on the grid such that:

Each of the three resulting sections formed by the cuts contains at least one rectangle.
Every rectangle belongs to exactly one section.
Return true if such cuts can be made; otherwise, return false.

code:

class Solution {
public:
    // Function to check if there are at least 2 non-overlapping sections of intervals
    bool check(vector<vector<int>>& intervals) {
        // Sort the intervals based on their starting points
        sort(intervals.begin(), intervals.end());
        
        int sections = 0; // Counter for non-overlapping sections
        int max_end = intervals[0][1]; // Initialize max_end with the end of the first interval
        
        // Iterate through each interval
        for (auto& interval : intervals) {
            int start = interval[0], end = interval[1];
            // If the current interval starts after the last max_end, we have a new section
            if (max_end <= start) {
                sections++; // Increment the section count
            }
            // Update max_end to be the maximum end encountered so far
            max_end = max(max_end, end);
        }
        
        // Return true if there are at least 2 non-overlapping sections
        return sections >= 2;
    }
    
    // Function to check if valid cuts can be made in the rectangles
    bool checkValidCuts(int n, vector<vector<int>>& rectangles) {
        vector<vector<int>> x_intervals, y_intervals; // Vectors to hold x and y intervals
        
        // Extract x and y intervals from the rectangles
        for (auto& rect : rectangles) {
            x_intervals.push_back({rect[0], rect[2]}); // Add x-intervals
            y_intervals.push_back({rect[1], rect[3]}); // Add y-intervals
        }
        
        // Check if either x or y intervals have at least 2 non-overlapping sections
        return check(x_intervals) || check(y_intervals);
    }
};
