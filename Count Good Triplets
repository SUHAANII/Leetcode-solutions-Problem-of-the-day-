question: Given an array of integers arr, and three integers a, b and c. You need to find the number of good triplets.

A triplet (arr[i], arr[j], arr[k]) is good if the following conditions are true:

0 <= i < j < k < arr.length
|arr[i] - arr[j]| <= a
|arr[j] - arr[k]| <= b
|arr[i] - arr[k]| <= c
Where |x| denotes the absolute value of x.

Return the number of good triplets.

code:

class Solution {
public:
    int countGoodTriplets(vector<int>& arr, int a, int b, int c) {
        int goodTriplets = 0; // Counter for good triplets
        int length = arr.size(); // Get the size of the array

        // Iterate over the first element of the triplet
        for (int i = 0; i < length; ++i) {
            // Iterate over the second element of the triplet
            for (int j = i + 1; j < length; ++j) {
                // Check the condition for the first two elements
                if (abs(arr[i] - arr[j]) <= a) {
                    // Iterate over the third element of the triplet
                    for (int k = j + 1; k < length; ++k) {
                        // Check the conditions for the third element
                        if (abs(arr[j] - arr[k]) <= b && 
                            abs(arr[i] - arr[k]) <= c) {
                            goodTriplets++; // Increment the count of good triplets
                            // 🥋 Rock Lee: "The power of repetition is unmatched!" 🔁
                        }
                    }
                }
            }
        }

        return goodTriplets; // Return the total count of good triplets
    }
};
