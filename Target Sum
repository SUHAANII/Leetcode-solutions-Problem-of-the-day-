question: You are given an integer array nums and an integer target.

You want to build an expression out of nums by adding one of the symbols '+' and '-' before each integer in nums and then concatenate all the integers.

For example, if nums = [2, 1], you can add a '+' before 2 and a '-' before 1 and concatenate them to build the expression "+2-1".
Return the number of different expressions that you can build, which evaluates to target

code:
class Solution {
public:
    // Helper function to compute all possible sums of a subset of 'nums'
    void computeSums(const vector<int>& nums, int start, int end, vector<long long>& sums) {
        // Start with an empty sum (0)
        sums.push_back(0);
        
        // Iterate over the specified range of the array
        for (int i = start; i < end; ++i) {
            int num = nums[i]; // Current number to include in subsets
            int n = sums.size(); // Current size of the sums vector
            
            // For each existing sum, create a new sum by adding the current number
            for (int j = 0; j < n; ++j) {
                sums.push_back(sums[j] + num); // Add the current number to existing sums
                sums[j] -= num; // Remove the current number from the existing sum (backtrack)
            }
        }
    }

    // Main function to find the number of ways to achieve the target sum
    int findTargetSumWays(vector<int>& nums, int target) {
        int n = nums.size(); // Get the size of the input array
        int mid = n / 2; // Calculate the midpoint to divide the array
        
        // Vectors to hold the sums of the two halves
        vector<long long> sums1;
        vector<long long> sums2;
        
        // Compute sums for the first half and the second half of the array
        computeSums(nums, 0, mid, sums1);
        computeSums(nums, mid, n, sums2);
        
        // Map to count occurrences of each sum in the second half
        unordered_map<long long, long long> countMap;
        for (auto sum : sums2) {
            countMap[sum]++; // Count how many times each sum appears
        }
        
        long long total = 0; // Initialize total ways to achieve the target sum
        
        // For each sum in the first half, check for its complement in the second half
        for (auto sum : sums1) {
            long long complement = (long long)target - sum; // Calculate the required complement
            // If the complement exists in the second half's sums, add its count to total
            if (countMap.find(complement) != countMap.end()) {
                total += countMap[complement];
            }
        }

        return total; // Return the total number of ways to reach the target sum
    }
};
