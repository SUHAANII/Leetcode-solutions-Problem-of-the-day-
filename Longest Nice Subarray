question: You are given an array nums consisting of positive integers.

We call a subarray of nums nice if the bitwise AND of every pair of elements that are in different positions in the subarray is equal to 0.

Return the length of the longest nice subarray.

A subarray is a contiguous part of an array.

Note that subarrays of length 1 are always considered nice.

code:

#include <vector>
#include <algorithm>

using namespace std;

class Solution {
public:
    // Function to find the length of the longest nice subarray
    int longestNiceSubarray(vector<int>& nums) {
        int l = 0;                // Left pointer for the current subarray
        int usedBits = 0;        // Bitmask to track used elements
        int maxLength = 0;       // Variable to store the maximum length found

        // Iterate through the array with the right pointer
        for (int r = 0; r < nums.size(); r++) {
            // While there is a conflict (i.e., the current number shares a bit with the used bits)
            while ((usedBits & nums[r]) != 0) {
                // Remove the leftmost number from the used bits
                usedBits ^= nums[l];
                l++; // Move the left pointer to the right
            }

            // Add the current number to the used bits
            usedBits |= nums[r];
            // Update the maximum length of the nice subarray found
            maxLength = max(maxLength, r - l + 1);
        }

        return maxLength; // Return the length of the longest nice subarray
    }
};
