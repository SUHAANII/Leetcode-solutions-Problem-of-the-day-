question: Given an array nums with n objects colored red, white, or blue, sort them in-place so that objects of the same color are adjacent, with the colors in the order red, white, and blue.

We will use the integers 0, 1, and 2 to represent the color red, white, and blue, respectively.

You must solve this problem without using the library's sort function.

code:
class Solution {
public:
    // Function to sort an array containing 0s, 1s, and 2s (Dutch National Flag problem)
    void sortColors(vector<int>& nums) {
        // Initialize counters for 0s and 1s
        int zeros = 0, ones = 0;
        // Get the size of the input array
        int n = nums.size();
        
        // First pass: Count the number of 0s and 1s in the array
        for(int num : nums) {
            if(num == 0) 
                zeros++; // Increment zeros counter for each 0 found
            else if(num == 1) 
                ones++; // Increment ones counter for each 1 found
        }  

        // Second pass: Fill the first part of the array with 0s
        for(int i = 0; i < zeros; ++i) {
            nums[i] = 0; // Set the first zeros count elements to 0
        }

        // Third pass: Fill the next part of the array with 1s
        for(int i = zeros; i < zeros + ones; ++i) {
            nums[i] = 1; // Set the next ones count elements to 1
        }

        // Fourth pass: Fill the remaining part of the array with 2s
        for(int i = zeros + ones; i < n; ++i) {
            nums[i] = 2; // Set the remaining elements to 2
        }
    }
};
