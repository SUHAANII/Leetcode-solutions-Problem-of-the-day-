question: You are given an array of integers nums. Perform the following steps:

Find any two adjacent numbers in nums that are non-coprime.
If no such numbers are found, stop the process.
Otherwise, delete the two numbers and replace them with their LCM (Least Common Multiple).
Repeat this process as long as you keep finding two adjacent non-coprime numbers.
Return the final modified array. It can be shown that replacing adjacent non-coprime numbers in any arbitrary order will lead to the same result.

The test cases are generated such that the values in the final array are less than or equal to 108.

Two values x and y are non-coprime if GCD(x, y) > 1 where GCD(x, y) is the Greatest Common Divisor of x and y.


code:

#include <vector>
#include <numeric> // For std::gcd
using namespace std;

static int st[100000], top = -1; // Static stack to hold intermediate values and a top index

class Solution {
public:
    // Function to calculate the least common multiple (LCM) of two integers
    static int lcm(int x, int y) {
        return x / gcd(x, y) * y; // LCM formula: (x * y) / GCD(x, y)
    }

    // Function to replace non-coprime numbers in the input vector with their LCMs
    static vector<int> replaceNonCoprimes(vector<int>& nums) {
        top = -1; // Reset the stack before processing
        for (int x : nums) { // Iterate through each number in the input vector
            int cur = x; // Current number to process
            while (top != -1) { // While the stack is not empty
                int g = gcd(st[top], cur); // Calculate the GCD of the top of the stack and the current number
                if (g == 1) break; // If GCD is 1, the numbers are coprime, exit the loop
                cur = lcm(st[top], cur); // Update current to the LCM of the top of the stack and current
                top--; // Pop the top element from the stack
            }
            st[++top] = cur; // Push the resulting LCM (or current number) onto the stack
        }

        // Return a vector containing the elements from the stack (up to the current top index)
        return vector<int>(st, st + top + 1);
    }
};
