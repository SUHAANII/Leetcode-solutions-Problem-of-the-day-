question: You are given a 0-indexed integer array nums and an integer pivot. Rearrange nums such that the following conditions are satisfied:

Every element less than pivot appears before every element greater than pivot.
Every element equal to pivot appears in between the elements less than and greater than pivot.
The relative order of the elements less than pivot and the elements greater than pivot is maintained.
More formally, consider every pi, pj where pi is the new position of the ith element and pj is the new position of the jth element. If i < j and both elements are smaller (or larger) than pivot, then pi < pj.
Return nums after the rearrangement.
code:

class Solution {
public:
    // Function to rearrange the array based on the pivot value
    vector<int> pivotArray(vector<int>& nums, int pivot) {
        // Create a result vector initialized with zeros, same size as nums
        vector<int> result(nums.size(), 0);
        int left = 0; // Pointer for the next position for elements less than pivot
        int right = nums.size() - 1; // Pointer for the next position for elements greater than pivot
        
        // Iterate through the array from both ends
        for (int i = 0, j = nums.size() - 1; i < nums.size(); ++i, --j) {
            // If the current element from the left is less than the pivot
            if (nums[i] < pivot) {
                result[left] = nums[i]; // Place it at the 'left' pointer
                left++; // Move the 'left' pointer to the right
            }
            
            // If the current element from the right is greater than the pivot
            if (nums[j] > pivot) {
                result[right] = nums[j]; // Place it at the 'right' pointer
                right--; // Move the 'right' pointer to the left
            }
        }
        
        // Fill in the pivot values in the middle section of the result array
        while (left <= right) {
            result[left] = pivot; // Place the pivot at the current 'left' position
            left++; // Move the 'left' pointer to the right
        }
        
        // Return the rearranged result array
        return result;
    }
};
