question: You are given three integers start, finish, and limit. You are also given a 0-indexed string s representing a positive integer.

A positive integer x is called powerful if it ends with s (in other words, s is a suffix of x) and each digit in x is at most limit.

Return the total number of powerful integers in the range [start..finish].

A string x is a suffix of a string y if and only if x is a substring of y that starts from some index (including 0) in y and extends to the index y.length - 1. For example, 25 is a suffix of 5125 whereas 512 is not.

 

code:

#include <vector>
#include <string>
#include <cmath>
using namespace std;

// Class to solve the problem of counting powerful integers
class Solution {
public:
    // Function to calculate the number of powerful integers in the range [start, finish]
    long long numberOfPowerfulInt(long long start, long long finish, int limit, string s) {
        // Count powerful integers up to finish and subtract those up to start - 1
        return countChakraShinobi(finish, limit, s) - countChakraShinobi(start - 1, limit, s);
    }

private:
    // Helper function to count powerful integers up to a given value
    long long countChakraShinobi(long long val, int limit, const string& clanSymbol) {
        string chakraFlow = to_string(val);  // Convert the number to a string to analyze its digits
        int prefixLength = chakraFlow.length() - clanSymbol.length();  // Calculate space for the prefix before the clan symbol

        // If there's not enough space for the clan symbol, return 0
        if (prefixLength < 0) return 0;

        // DP table to store results, where rasenganScroll[i][tightMode] represents:
        // tightMode = 0 (not tightly bound to the value), 1 (tightly bound)
        vector<vector<long long>> rasenganScroll(prefixLength + 1, vector<long long>(2, 0));

        // Base case: when we have formed all prefix digits
        rasenganScroll[prefixLength][0] = 1;  // Free path (no restrictions)
        // Check if the suffix formed by the clan symbol is valid
        rasenganScroll[prefixLength][1] = chakraFlow.substr(prefixLength) >= clanSymbol ? 1 : 0;

        // Iterate backwards through the digits of the number
        for (int i = prefixLength - 1; i >= 0; --i) {
            int currentChakra = chakraFlow[i] - '0';  // Current digit being processed

            // Not tight to the upper bound: we can use any digit from 0 to limit
            rasenganScroll[i][0] = (limit + 1) * rasenganScroll[i + 1][0];

            // Tight case: we can only use digits less than or equal to the current digit
            if (currentChakra <= limit) {
                // Count combinations where we can use digits up to currentChakra
                rasenganScroll[i][1] = (long long) currentChakra * rasenganScroll[i + 1][0] + rasenganScroll[i + 1][1];
            } else {
                // Count combinations where we can only use digits up to limit
                rasenganScroll[i][1] = (long long)(limit + 1) * rasenganScroll[i + 1][0];
            }
        }

        // Return the count of valid powerful integers from the top of the DP table
        return rasenganScroll[0][1];
    }
};
