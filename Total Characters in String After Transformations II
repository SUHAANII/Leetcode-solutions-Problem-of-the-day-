question: You are given a string s consisting of lowercase English letters, an integer t representing the number of transformations to perform, and an array nums of size 26. In one transformation, every character in s is replaced according to the following rules:

Replace s[i] with the next nums[s[i] - 'a'] consecutive characters in the alphabet. For example, if s[i] = 'a' and nums[0] = 3, the character 'a' transforms into the next 3 consecutive characters ahead of it, which results in "bcd".
The transformation wraps around the alphabet if it exceeds 'z'. For example, if s[i] = 'y' and nums[24] = 3, the character 'y' transforms into the next 3 consecutive characters ahead of it, which results in "zab".
Return the length of the resulting string after exactly t transformations.

Since the answer may be very large, return it modulo 109 + 7.



code:
using ll = long long;

class Solution {
public:
    const int mod = 1e9 + 7; // Define a modulus for calculations to prevent overflow

    // Function to multiply two matrices A and B
    vector<vector<ll>> multiplyMatrices(const vector<vector<ll>> &A, const vector<vector<ll>> &B) {
        int rowsA = A.size(); // Number of rows in A
        int colsA = A[0].size(); // Number of columns in A
        int colsB = B[0].size(); // Number of columns in B
        
        // Temporary matrix to hold intermediate results with larger data type
        vector<vector<__int128_t>> temp(rowsA, vector<__int128_t>(colsB, 0));
        vector<vector<ll>> result(rowsA, vector<ll>(colsB, 0)); // Resultant matrix

        // Matrix multiplication
        for (int i = 0; i < rowsA; i++) {
            for (int j = 0; j < colsB; j++) {
                for (int k = 0; k < colsA; k++) {
                    temp[i][j] += A[i][k] * B[k][j]; // Multiply and accumulate
                }
                result[i][j] = temp[i][j] % mod; // Apply modulus to prevent overflow
            }
        }
        return result; // Return the resultant matrix
    }

    // Function to raise a matrix to a given exponent using exponentiation by squaring
    vector<vector<ll>> powerMatrix(vector<vector<ll>> matrix, ll exponent) {
        int size = matrix.size();
        vector<vector<ll>> result(size, vector<ll>(size, 0)); // Identity matrix

        // Initialize result as an identity matrix
        for (int i = 0; i < size; i++) result[i][i] = 1;

        // Exponentiation by squaring
        while (exponent > 0) {
            if (exponent % 2 == 1) 
                result = multiplyMatrices(result, matrix); // Multiply if exponent is odd
            matrix = multiplyMatrices(matrix, matrix); // Square the matrix
            exponent /= 2; // Divide exponent by 2
        }
        return result; // Return the resulting matrix
    }

    // Function to calculate the length of the string after transformations
    int lengthAfterTransformations(string s, int t, vector<int>& nums) {
        // Transformation matrix for character shifts
        vector<vector<ll>> transform(26, vector<ll>(26, 0));

        // Fill the transformation matrix based on the nums array
        for (int i = 0; i < 26; i++) {
            for (int shift = 0; shift < nums[i]; shift++) {
                transform[i][(i + 1 + shift) % 26]++; // Shift character 'i' to its new position
            }
        }

        // Raise the transformation matrix to the power of t
        transform = powerMatrix(transform, t);
        
        // Frequency matrix to count occurrences of each character in the string
        vector<vector<ll>> freq(1, vector<ll>(26, 0));
        for (char ch : s) {
            freq[0][ch - 'a']++; // Count occurrences of each character
        }

        // Multiply frequency matrix by the transformation matrix
        freq = multiplyMatrices(freq, transform);
        
        // Calculate the total length of the transformed string
        int totalLength = 0;
        for (int count : freq[0]) {
            totalLength += count; // Sum up the counts
            if (totalLength >= mod) totalLength -= mod; // Apply modulus
        }

        return totalLength; // Return the total length
    }
};

