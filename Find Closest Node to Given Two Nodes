question: You are given a directed graph of n nodes numbered from 0 to n - 1, where each node has at most one outgoing edge.

The graph is represented with a given 0-indexed array edges of size n, indicating that there is a directed edge from node i to node edges[i]. If there is no outgoing edge from i, then edges[i] == -1.

You are also given two integers node1 and node2.

Return the index of the node that can be reached from both node1 and node2, such that the maximum between the distance from node1 to that node, and from node2 to that node is minimized. If there are multiple answers, return the node with the smallest index, and if no possible answer exists, return -1.



code:
class Solution {
public:
    // Depth-First Search (DFS) function to compute distances from a starting node
    void dfs(int current, int distance, const vector<int>& edges, vector<int>& distances) {
        // Traverse until the current node is valid and not yet visited
        while (current != -1 && distances[current] == -1) {
            // Set the distance for the current node
            distances[current] = distance++;
            // Move to the next node in the path
            current = edges[current];
        }
    }

    // Function to find the closest meeting node between two starting nodes
    int closestMeetingNode(vector<int>& edges, int start1, int start2) {
        // Initialize result variable and minimum of maximum distance
        int res = -1, Min_Of_Max = INT_MAX;
        int n = edges.size(); // Number of nodes in the graph
        
        // Create distance vectors initialized to -1 (indicating unvisited)
        vector<int> dist1(n, -1), dist2(n, -1);
        
        // Perform DFS from both starting nodes to calculate distances
        dfs(start1, 0, edges, dist1);
        dfs(start2, 0, edges, dist2);

        // Iterate through all nodes to find the closest meeting node
        for (int i = 0; i < n; i++) {
            // Check if both nodes are reachable from start1 and start2
            if (dist1[i] >= 0 && dist2[i] >= 0) {
                // Calculate the maximum distance from both starting nodes to this node
                int maxDist = max(dist1[i], dist2[i]);
                // If this maximum distance is less than the current minimum, update the result
                if (maxDist < Min_Of_Max) {
                    Min_Of_Max = maxDist; // Update minimum of maximum distance
                    res = i; // Update result to the current node
                }
            }
        }
        // Return the closest meeting node or -1 if none found
        return res;
    }
};

