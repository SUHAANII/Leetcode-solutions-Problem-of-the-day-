question: You are given an integer array nums consisting of 2 * n integers.

You need to divide nums into n pairs such that:

Each element belongs to exactly one pair.
The elements present in a pair are equal.
Return true if nums can be divided into n pairs, otherwise return false.

code:

class Solution {
public:
    // Function to determine if the array can be divided into pairs
    bool divideArray(vector<int>& nums) {
        // Create an unordered map to count occurrences of each number
        unordered_map<int, int> counter; 
        
        // Count the frequency of each number in the array
        for (int num : nums) {
            counter[num]++;
        }
        
        // Check the count of each number
        for (const auto& [_, count] : counter) {
            // If any number has an odd count, it's impossible to pair them all
            if (count % 2 != 0) {
                return false; // Return false if an odd count is found
            }
        }
        
        // If all counts are even, return true
        return true; // Return true indicating the array can be divided into pairs
    }
};
