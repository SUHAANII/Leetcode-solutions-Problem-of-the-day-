question: Given an integer n, return all the numbers in the range [1, n] sorted in lexicographical order.

You must write an algorithm that runs in O(n) time and uses O(1) extra space. 

code:
class Solution {
public:
    // Function to generate numbers from 1 to n in lexical order
    vector<int> lexicalOrder(int n) {
        vector<int> v; // Vector to store the result
        int count = 1; // Start with the smallest number in lexical order
        
        // Loop to generate n numbers
        for (int i = 0; i < n; i++) {
            v.push_back(count); // Add the current count to the result
            
            // If the next number (count * 10) is within the range, go deeper
            if (count * 10 <= n) {
                count *= 10; // Move to the next level (e.g., from 1 to 10)
            } else {
                // If count exceeds n, go back to the previous level
                if (count >= n) count /= 10; // Step back to the parent number
                
                count++; // Increment to the next number
                
                // Remove trailing zeros (e.g., go from 100 to 101)
                while (count % 10 == 0) count /= 10; // Keep removing trailing zeros
            }
        }
        
        return v; // Return the vector containing numbers in lexical order
    }
};
