question: You are given two arrays nums1 and nums2 consisting of positive integers.

You have to replace all the 0's in both arrays with strictly positive integers such that the sum of elements of both arrays becomes equal.

Return the minimum equal sum you can obtain, or -1 if it is impossible
code:
class Solution {
public:
    long long minSum(vector<int>& nums1, vector<int>& nums2) {
        // Optimize input/output operations
        ios_base::sync_with_stdio(false);
        cin.tie(0); 
        cout.tie(0);
        
        // Initialize variables to store the sums and counts of zeroes
        long long nums1_sum = 0, nums2_sum = 0; // Sums of the two arrays
        long long nums1_zeroes = 0, nums2_zeroes = 0; // Count of zeroes in the arrays

        // Calculate the sum and count of zeroes for nums1
        for (int x : nums1) {
            if (x == 0) {
                nums1_zeroes++; // Increment zero count
                nums1_sum++; // Replace 0 with 1 in the sum
            } else {
                nums1_sum += x; // Add non-zero elements to the sum
            }
        }

        // Calculate the sum and count of zeroes for nums2
        for (int x : nums2) {
            if (x == 0) {
                nums2_zeroes++; // Increment zero count
                nums2_sum++; // Replace 0 with 1 in the sum
            } else {
                nums2_sum += x; // Add non-zero elements to the sum
            }
        }

        // Check if it's impossible to equalize the sums
        if ((nums1_zeroes == 0 && nums2_sum > nums1_sum) ||
            (nums2_zeroes == 0 && nums1_sum > nums2_sum))
            return -1; // Return -1 if equalization is not possible

        // Return the maximum sum of the two arrays
        return max(nums1_sum, nums2_sum);
    }
};
