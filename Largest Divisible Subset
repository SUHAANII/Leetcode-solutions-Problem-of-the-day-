question: Given a set of distinct positive integers nums, return the largest subset answer such that every pair (answer[i], answer[j]) of elements in this subset satisfies:

answer[i] % answer[j] == 0, or
answer[j] % answer[i] == 0
If there are multiple solutions, return any of them.

 

code:

class Solution {
public:
    vector<int> largestDivisibleSubset(vector<int>& nums) {
        // Return an empty vector if the input is empty
        if (nums.empty()) return {};
    
        // Sort the input array to facilitate the subset search
        std::sort(nums.begin(), nums.end());
        int n = nums.size();
        
        // dp[i] will hold the size of the largest divisible subset ending with nums[i]
        std::vector<int> dp(n, 1);
        // prev_index[i] will hold the index of the previous element in the subset
        std::vector<int> prev_index(n, -1);
        
        int max_index = 0; // To track the index of the largest subset
        int max_length = 1; // To track the length of the largest subset
        
        // Fill dp and prev_index arrays
        for (int i = 1; i < n; ++i) {
            for (int j = 0; j < i; ++j) {
                // Check if nums[i] is divisible by nums[j]
                if (nums[i] % nums[j] == 0 && dp[i] < dp[j] + 1) {
                    // Update dp[i] and prev_index[i]
                    dp[i] = dp[j] + 1; // Increase the size of the subset
                    prev_index[i] = j; // Set the previous index
                    // Update max_length and max_index if we found a longer subset
                    if (dp[i] > max_length) {
                        max_length = dp[i];
                        max_index = i;
                    }
                }
            }
        }
        
        // Reconstruct the largest divisible subset
        std::vector<int> subset;
        while (max_index != -1) {
            subset.push_back(nums[max_index]); // Add the current number to the subset
            max_index = prev_index[max_index]; // Move to the previous index
        }
        
        // The subset is constructed in reverse order, so reverse it before returning
        std::reverse(subset.begin(), subset.end());
        
        return subset; // Return the largest divisible subset
    }
};
