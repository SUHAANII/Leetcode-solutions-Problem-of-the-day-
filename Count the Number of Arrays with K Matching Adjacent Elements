question: You are given three integers n, m, k. A good array arr of size n is defined as follows:

Each element in arr is in the inclusive range [1, m].
Exactly k indices i (where 1 <= i < n) satisfy the condition arr[i - 1] == arr[i].
Return the number of good arrays that can be formed.

Since the answer may be very large, return it modulo 109 + 7.

code:
const int MOD = 1e9 + 7;

class Solution {
public:
    long long modInverse(long long a, long long mod) {
        long long res = 1;
        long long power = mod - 2;

        while (power) {
            if (power & 1)
                res = res * a % mod;
            a = a * a % mod;
            power >>= 1;
        }

        return res;
    }

    int nCr(int n, int r) {
        if (r > n) return 0;
        if (r == 0 || r == n) return 1;

        long long res = 1;

        for (int i = 1; i <= r; i++) {
            res = res * (n - r + i) % MOD;
            res = res * modInverse(i, MOD) % MOD;
        }

        return (int)res;
    }

    long long bin_expo(long long a, long long b) {
        long long result = 1;
        while (b) {
            if (b & 1)
                result = (result * a) % MOD;
            a = (a * a) % MOD;
            b >>= 1;
        }
        return result;
    }

    int countGoodArrays(int n, int m, int k) {
        // Check for edge cases
        if (n == 0 || m == 0 || k >= n) return 0;

        // Calculate the number of good arrays
        long long baseFormula = (m * 1LL * bin_expo(m - 1, n - (k + 1))) % MOD;
        long long result = (baseFormula * 1LL * nCr(n - 1, k)) % MOD;

        return (int)result;
    }
};
