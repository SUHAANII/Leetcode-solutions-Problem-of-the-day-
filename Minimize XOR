Question: Given two positive integers num1 and num2, find the positive integer x such that:

x has the same number of set bits as num2, and
The value x XOR num1 is minimal.
Note that XOR is the bitwise XOR operation.

Return the integer x. The test cases are generated such that x is uniquely determined.

The number of set bits of an integer is the number of 1's in its binary representation.

code:

class Solution {
public:
    int minimizeXor(int num1, int num2) {
        // Count the number of set bits (1s) in num1 and num2
        int a = __builtin_popcount(num1); // Number of 1s in num1
        int b = __builtin_popcount(num2); // Number of 1s in num2
        
        int res = num1; // Start with the result as num1
        
        // Iterate through each bit position from 0 to 31 (for 32-bit integers)
        for (int i = 0; i < 32; ++i) {
            // If num1 has more set bits than num2
            if (a > b && (1 << i) & num1) {
                // Turn off the bit at position i in the result
                res ^= 1 << i; // Toggle the i-th bit
                --a; // Decrease the count of set bits in num1
            }
            // If num1 has fewer set bits than num2
            if (a < b && !((1 << i) & num1)) {
                // Turn on the bit at position i in the result
                res ^= 1 << i; // Toggle the i-th bit
                ++a; // Increase the count of set bits in num1
            }
        }
        
        // Return the modified result which minimizes the XOR
        return res;
    }
};
