question: Given a 0-indexed integer array nums of length n and an integer k, return the number of pairs (i, j) where 0 <= i < j < n, such that nums[i] == nums[j] and (i * j) is divisible by k.

code:
class Solution {
public:
    // Function to count pairs of indices (i, j) such that nums[i] == nums[j] 
    // and the product of the indices i * j is divisible by k
    int countPairs(vector<int>& nums, int k, int pairs = 0) {
        // Outer loop to iterate through each element in the array
        for (int i = 0; i < nums.size() - 1; i++) {
            // Inner loop to find pairs with the current element
            for (int j = i + 1; j < nums.size(); j++) {
                // Check if the elements are equal and the product of indices is divisible by k
                if (nums[i] == nums[j] && i * j % k == 0) {
                    ++pairs; // Increment the count of valid pairs
                }
            }
        }
        return pairs; // Return the total count of pairs found
    }
};
