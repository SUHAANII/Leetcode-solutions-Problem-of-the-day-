Question:  You are given a string s.

You can perform the following process on s any number of times:

Choose an index i in the string such that there is at least one character to the left of index i that is equal to s[i], and at least one character to the right that is also equal to s[i].
Delete the closest character to the left of index i that is equal to s[i].
Delete the closest character to the right of index i that is equal to s[i].
Return the minimum length of the final string s that you can achieve.

code: 
class Solution {
public:
    int minimumLength(string s) {
        // Create a frequency array to count occurrences of each character (26 letters)
        vector<int> charFrequency(26, 0);
        
        // Variable to store the total length of the palindrome
        int totalLength = 0;

        // Count the frequency of each character in the string
        for (char currentChar : s) {
            charFrequency[currentChar - 'a']++; // Increment the count for the current character
        }

        // Calculate the minimum length of the palindrome
        for (int frequency : charFrequency) {
            // Skip characters that do not appear in the string
            if (frequency == 0) continue;

            // If the frequency is even, we can use all of them in pairs
            if (frequency % 2 == 0) {
                totalLength += 2; // Add 2 for each pair of characters
            } else {
                totalLength += 1; // For odd frequencies, we can use one character in the center
            }
        }

        // Return the total length of the longest palindrome that can be formed
        return totalLength;
    }
};
