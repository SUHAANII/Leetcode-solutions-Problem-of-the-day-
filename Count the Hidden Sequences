question: You are given a 0-indexed array of n integers differences, which describes the differences between each pair of consecutive integers of a hidden sequence of length (n + 1). More formally, call the hidden sequence hidden, then we have that differences[i] = hidden[i + 1] - hidden[i].

You are further given two integers lower and upper that describe the inclusive range of values [lower, upper] that the hidden sequence can contain.

For example, given differences = [1, -3, 4], lower = 1, upper = 6, the hidden sequence is a sequence of length 4 whose elements are in between 1 and 6 (inclusive).
[3, 4, 1, 5] and [4, 5, 2, 6] are possible hidden sequences.
[5, 6, 3, 7] is not possible since it contains an element greater than 6.
[1, 2, 3, 4] is not possible since the differences are not correct.
Return the number of possible hidden sequences there are. If there are no possible sequences, return 0.

code:

class Solution {
public:
    // Function to calculate the number of valid arrays based on the difference array
    int numberOfArrays(vector<int>& diff, int lower, int upper) {
        // Initialize variables:
        long sum = 0;   // To keep track of the cumulative sum
        long maxi = 0;  // To track the maximum cumulative sum
        long mini = 0;  // To track the minimum cumulative sum
        
        // Iterate through the difference array
        for (int i : diff) {
            sum += i;  // Update the cumulative sum with the current difference
            maxi = max(maxi, sum);  // Update the maximum cumulative sum found so far
            mini = min(mini, sum);  // Update the minimum cumulative sum found so far
        }
        
        // Calculate the number of valid starting points for the array
        // The valid range for the starting point is [lower, upper]
        // The range of potential sums is [lower + mini, upper + maxi]
        // The number of valid starting points is the overlap of these ranges
        return max(0L, upper - lower - maxi + mini + 1);
    }
};
