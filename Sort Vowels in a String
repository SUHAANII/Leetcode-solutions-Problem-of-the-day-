question: Given a 0-indexed string s, permute s to get a new string t such that:

All consonants remain in their original places. More formally, if there is an index i with 0 <= i < s.length such that s[i] is a consonant, then t[i] = s[i].
The vowels must be sorted in the nondecreasing order of their ASCII values. More formally, for pairs of indices i, j with 0 <= i < j < s.length such that s[i] and s[j] are vowels, then t[i] must not have a higher ASCII value than t[j].
Return the resulting string.

The vowels are 'a', 'e', 'i', 'o', and 'u', and they can appear in lowercase or uppercase. Consonants comprise all letters that are not vowels.

code:

class Solution {
public:
    // Function to sort the vowels in the given string
    string sortVowels(string s) {
        // Vector to store the vowels found in the string
        vector<char> vowels;

        // Iterate through each character in the string
        for (char c : s) {
            // Check if the character is a vowel
            if (isVowel(c)) {
                // If it is a vowel, add it to the vowels vector
                vowels.push_back(c);
            }
        }

        // Sort the collected vowels in ascending order
        sort(vowels.begin(), vowels.end());

        // Index to track the position in the sorted vowels vector
        int v_index = 0;

        // Iterate through the original string again
        for (int i = 0; i < s.size(); i++) {
            // Check if the current character is a vowel
            if (isVowel(s[i])) {
                // Replace the vowel in the original string with the next sorted vowel
                s[i] = vowels[v_index++];
            }
        }

        // Return the modified string with sorted vowels
        return s;
    }

private:
    // Helper function to determine if a character is a vowel
    bool isVowel(char c) {
        // Check if the character is in the string of vowels (both uppercase and lowercase)
        return string("AEIOUaeiou").find(c) != string::npos;
    }
};
