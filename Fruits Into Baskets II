question: You are given two arrays of integers, fruits and baskets, each of length n, where fruits[i] represents the quantity of the ith type of fruit, and baskets[j] represents the capacity of the jth basket.

From left to right, place the fruits according to these rules:

Each fruit type must be placed in the leftmost available basket with a capacity greater than or equal to the quantity of that fruit type.
Each basket can hold only one type of fruit.
If a fruit type cannot be placed in any basket, it remains unplaced.
Return the number of fruit types that remain unplaced after all possible allocations are made.

code:
class Solution {
public:
    // Function to count the number of unplaced fruits in the baskets
    int numOfUnplacedFruits(vector<int>& fruits, vector<int>& baskets) {
        const int n = fruits.size(); // Get the number of fruits
        int ans = n; // Initialize the answer with the total number of fruits

        // Loop through each fruit
        for (int i = 0; i < n; i++) {
            // Loop through each basket
            for (int j = 0; j < n; j++) {
                // Check if the current fruit can fit in the current basket
                if (fruits[i] <= baskets[j]) {
                    ans--; // Decrease the count of unplaced fruits
                    baskets[j] = 0; // Mark the basket as used (no longer available)
                    break; // Move to the next fruit since it's already placed
                }
            }
        }
        return ans; // Return the number of unplaced fruits
    }
};
