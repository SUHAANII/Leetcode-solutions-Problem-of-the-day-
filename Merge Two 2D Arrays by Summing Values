Question: You are given two 2D integer arrays nums1 and nums2.

nums1[i] = [idi, vali] indicate that the number with the id idi has a value equal to vali.
nums2[i] = [idi, vali] indicate that the number with the id idi has a value equal to vali.
Each array contains unique ids and is sorted in ascending order by id.

Merge the two arrays into one array that is sorted in ascending order by id, respecting the following conditions:

Only ids that appear in at least one of the two arrays should be included in the resulting array.
Each id should be included only once and its value should be the sum of the values of this id in the two arrays. If the id does not exist in one of the two arrays, then assume its value in that array to be 0.
Return the resulting array. The returned array must be sorted in ascending order by id.

code:
class Solution {
public:
    vector<vector<int>> mergeArrays(vector<vector<int>>& nums1, vector<vector<int>>& nums2) {
        // Initialize pointers for both input arrays
        int i = 0, j = 0;
        vector<vector<int>> result; // This will store the merged result
        
        // Traverse both arrays using two pointers
        while (i < nums1.size() && j < nums2.size()) {
            // Extract the id and value from both arrays
            int id1 = nums1[i][0], val1 = nums1[i][1];
            int id2 = nums2[j][0], val2 = nums2[j][1];
            
            if (id1 < id2) {
                // If id1 is smaller, add it to the result
                result.push_back({id1, val1});
                i++; // Move pointer in nums1
            } else if (id2 < id1) {
                // If id2 is smaller, add it to the result
                result.push_back({id2, val2});
                j++; // Move pointer in nums2
            } else {
                // If ids are equal, sum their values
                result.push_back({id1, val1 + val2});
                i++; // Move pointer in nums1
                j++; // Move pointer in nums2
            }
        }
        
        // Add remaining elements from nums1, if any
        while (i < nums1.size()) {
            result.push_back(nums1[i]);
            i++; // Move pointer in nums1
        }
        
        // Add remaining elements from nums2, if any
        while (j < nums2.size()) {
            result.push_back(nums2[j]);
            j++; // Move pointer in nums2
        }
        
        // Return the merged result
        return result;
    }
};


