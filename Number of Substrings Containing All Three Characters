Question:Given a string s consisting only of characters a, b and c.

Return the number of substrings containing at least one occurrence of all these characters a, b and c.

code:

#include <unordered_map>
#include <string>
using namespace std;

class Solution {
public:
    int numberOfSubstrings(string s) {
        // Initialize count of valid substrings
        int count = 0;
        // Left pointer for the sliding window
        int left = 0;
        // Map to keep track of the count of 'a', 'b', and 'c'
        unordered_map<char, int> char_count = {{'a', 0}, {'b', 0}, {'c', 0}};
        
        // Iterate through the string with the right pointer
        for (int right = 0; right < s.length(); ++right) {
            // Increment the count of the character at the right pointer
            char_count[s[right]]++;
            
            // Check if we have at least one of each character ('a', 'b', 'c')
            while (char_count['a'] > 0 && char_count['b'] > 0 && char_count['c'] > 0) {
                // If we have all three characters, count the substrings
                // All substrings starting from 'left' to 'right' are valid
                count += s.length() - right; // Count substrings ending at 'right'
                
                // Move the left pointer to reduce the size of the current window
                // Decrement the count of the character at the left pointer
                char_count[s[left]]--;
                // Move the left pointer one step to the right
                left++;
            }
        }
        
        // Return the total count of valid substrings
        return count;
    }
};
