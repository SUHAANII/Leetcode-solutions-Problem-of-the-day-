Question:  You are given a list of strings of the same length words and a string target.

Your task is to form target using the given words under the following rules:

target should be formed from left to right.
To form the ith character (0-indexed) of target, you can choose the kth character of the jth string in words if target[i] = words[j][k].
Once you use the kth character of the jth string of words, you can no longer use the xth character of any string in words where x <= k. In other words, all characters to the left of or at index k become unusuable for every string.
Repeat the process until you form the string target.
Notice that you can use multiple characters from the same string in words provided the conditions above are met.

Return the number of ways to form target from words. Since the answer may be too large, return it modulo 109 + 7.

code:  

// Declare a 2D array for dynamic programming
int dp[1001][1001];

class Solution {
public:
    // Define a constant for modulo operation
    const int mod = 1e9 + 7;
    
    // Frequency array to count occurrences of each character in each column
    int freq[26][1000] = {0};

    // Recursive function to calculate the number of ways
    int f(int i, int j, const vector<string>& words, const string& target) {
        // Base case: if j == 0, we can form the target (empty string) in one way
        if (j == 0) return 1; 
        
        // If i < j, not enough characters to form the target
        if (i < 0 || i < j) return 0; 
        
        // Return the cached result if already computed
        if (dp[i][j] != -1) return dp[i][j];

        long long cnt = 0; // Count of ways

        // Option 1: Skip the current character
        cnt += f(i - 1, j, words, target);

        // Option 2: Take the current character if it matches
        long long fc = freq[target[j - 1] - 'a'][i - 1]; // Frequency of target[j-1] in column i-1
        if (fc > 0) 
            cnt += f(i - 1, j - 1, words, target) * fc; // Add ways to form target[j-1]

        // Store the result in the DP table and return it
        return dp[i][j] = cnt % mod;
    }

    // Main function to count the number of ways to form the target
    int numWays(vector<string>& words, const string& target) {
        const int m = target.size(); // Length of target
        const int n = words[0].size(); // Length of each word

        // Count frequency of each character in each column
        memset(freq, 0, sizeof(freq)); // Initialize frequency array
        for (int i = 0; i < n; i++) {
            for (const auto& w : words) 
                freq[w[i] - 'a'][i]++; // Increment frequency for character w[i]
        }

        // Initialize DP table with -1
        memset(dp, -1, sizeof(dp));

        // Call the recursive function starting from the last character of the words and target
        return f(n, m, words, target);
    }
};
