question: You are given a string s. We want to partition the string into as many parts as possible so that each letter appears in at most one part. For example, the string "ababcc" can be partitioned into ["abab", "cc"], but partitions such as ["aba", "bcc"] or ["ab", "ab", "cc"] are invalid.

Note that the partition is done so that after concatenating all the parts in order, the resultant string should be s.

Return a list of integers representing the size of these parts.

code:

class Solution {
public:
    // Function to partition labels in the string and return their sizes
    vector<int> partitionLabels(string s) {
        // Map to store the last occurrence index of each character
        unordered_map<char, int> last_occurrence;

        // Populate the last_occurrence map with the index of each character
        for (int i = 0; i < s.size(); i++) {
            last_occurrence[s[i]] = i; // Store the last index of each character
        }

        vector<int> result; // Vector to store the sizes of each partition
        int start = 0; // Start index of the current partition
        int end = 0;   // End index of the current partition

        // Iterate through the string to determine partitions
        for (int i = 0; i < s.size(); i++) {
            // Update the end index to the furthest last occurrence of the current character
            end = max(end, last_occurrence[s[i]]);
            
            // If the current index reaches the end of the partition
            if (i == end) {
                // Add the size of the partition to the result
                result.push_back(end - start + 1);
                // Move the start index to the next character after the current partition
                start = i + 1;
            }
        }

        return result; // Return the sizes of the partitions
    }
};
